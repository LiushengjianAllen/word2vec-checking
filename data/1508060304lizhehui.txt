Oracle数据库实训任务书
一、实训目标
通过项目实战，理解数据库的基本概念，熟悉Oracle的基本操作，创建用户、表、检查约束，编写SQL语句执行数据库查询、新增、修改、删除，为Java、.Net开发提供数据存储及数据操作的基础。
课程要求从两个方面的能力目标实现，素养目标要求学员在通过学习具备相对应的学习技能、素养要求；技术目标要求学员必须掌握课程产品所定义的知识与技能。
（1）素养目标
分析需求的能力；
问题解决能力、总结归纳能力。
（2）技术目标
操作Oracle的能力；
SQL语句编写的能力。

二、实训内容（见附录）


三、实训进度安排
按教学计划规定，该设计总学时数为1周，其进度及时间大致分配如下：


四、考核评定













 
青岛科技大学
《Oracle数据库实训》




题目     网上商城购物系统       





指导教师：        徐美娇          
姓    名：        李哲辉          
学    号：      1508060317        
班    级：           153            
		专    业：       软件工程         
地    点：青科大崂山校区弘毅楼c408
		时    间：   2017.6.20 至 2017.6.24  


一、需求规格说明
1 文档介绍
文档目的
本需求分析规格说明书的目的是为软件开发和客户之间就“网上购物平台”项目提供需求范围和需求内容的规定。
通过此文档向客户展示他们对项目的理解，并且当规格说明书得到用户确认后，它将成为开发此软件在进行项目设计、实现、测试和实施过程中唯一的需求规范。
1.2 文档范围
文档包括，对产品的介绍，产品面向的用户群体，产品遵循的规范，产品中的角色，产品范围，业务流程，各功能模块的划分，以及各模块包含的子功能，产品的功能性需求和非功能性需求。
1.3 读者对象
需求的合法读者：支持本项目的徐美娇老师，开发成员，项目负责人，系统设计人员，数据库设计人员，编码人员，软件测试人员，客户。
1.4 参考文档
1.5 术语与缩写解释










2 产品介绍
在社会竞争日益激烈的今天，我们面临越来越多的工作和生活压力，随之而来的就是自身的休息时间逐渐减少，从而有很多的大众没有时间或者宁愿节省时间去工作、加班，受到生活环境和时间的限制，有很多人没有时间去购物或者宁愿珍惜自己的休息时间去好好休整。为了改变这种状况，越来越多的人选择在网上购物，节省大量的时间。
随着互联网的发展，人们对互联网购物的要求也在不断提高，这就要求商城网站不单只做单纯的买卖平台，还要提供更多的，更方便的功能来满足人们的需求。
本应用系统应达到的目标概述如下：
为用户们提供一个拥有大量选择的平台，使那些需要节省大量时间的用户以最少的时间选择自己最需要的物品，并物有所值。
3 产品面向的用户群体
本产品最终面向的用户群是以全龄，以网络购物为目的的用户。主要给那些不愿出门购物或没有时间购物为主的人提供一个节省购物时间的平台，在这里用户可以找到各类物品，易于比较并节省大量时间。
本产品不适用于年龄太小、不以网络购物为主要目的的其它网民。

4产品应当遵循的标准或规范
本软件的开发完全按照企业标准开发。数据命名的规则遵循《语言编程规约》中相关的规定，软件开发遵循国际通用CMMI标准。
5 产品范围
本产品最终面向的用户群是以网络购物为主要目的的用户，通过本网络使用户通过搜索、选择产品、购入、评价等方式实现网络购物的目的。
6 产品中的角色







7 产品的功能性需求
7.1 业务整体规划
7.1.1 整体业务用例图



















7.1.2 整体功能划分
在本系统中，主要包括用户、卖家和管理员三个角色。本系统初期重点突出用户的管理的权限，具体用户的权限如下：
用户自我管理。主要包括新用户的注册、登录和退出登录以及用户基本信息的管理三个部分，实现用户的相关自我的一些基本操作。
查看商品。实现用户对商品的搜索查看等功能。
收藏夹。实现用户对商品的收藏。
购买商品。实现用户对商品的购买。
评价商品。实现用户收货后对商品的评价。
管理员权限如下：
商品管理。体现管理员对各卖家的商品进行管理，如发现不合格商品，马上下架。
支付宝。体现用户和卖家之间的桥梁，用户收到货物后管理员将用户打到支付宝的钱转到卖家卡上。
举报管理。实现用户对卖家的投诉，核实实情，解决用户与卖家的矛盾，如果卖家货物不合格，则将卖家账号整顿，合格后继续上架。
7.2 用户自我管理


















用例描述：

















7.3搜查商品
















7.4收藏商品















7.5购买商品


















7.6评价商品
















7.7订单管理














7.8订单管理


























7.9商品管理














7.10划账管理


















7.11投诉管理

















8 软硬件环境需求

9 产品质量需求






二、数据库设计
0. 文档介绍
0.1 文档目的
本文档是SNS交友社区项目的第二阶段，本阶段主要解决系统用到的数据库的设计问题，数据库设计的根据是前一阶段形成的《系统需求规格说明书》，根据《系统规格说明书》中对系统的描述，确定系统涉及到的数据库表。
本系统设计的数据库表是进行系统开发的基础，在数据库设计的基础上可以进行系统的详细设计。在以后的软件测试以及软件维护阶段也可参考此说明书，以便于了解在数据库设计阶段中设计的各个表的信息，或在下一阶段修改时找出在本阶段设计的不足或错误。
 
0.2 文档范围
文档包括：数据库环境说明，数据库命名规则，逻辑设计，物理设计，安全设计，数据库优化，数据库管理和维护说明等信息。
0.3 读者对象
数据库设计报告书的合法读者系统设计人员，数据库设计人员，编码人员，软件测试人员，客户。
0.5 术语与缩写解释



1. 数据库环境说明
本系统采用Oracle数据库系统
2. 数据库的命名规则
（1）、表名以tb_开头，当表名中含有两个以上的英文单词时，单词间不加空格，但是从第二个单词开始的单词首字母要大写。
	（2）、表中的字段名首字母小写，字段名中含有两个以上的英文单词时，单词间不加空格，但是从第二个单词开始的单词首字母要大写。
3. 逻辑设计
详细设计略。
4. 物理设计
4.0 表汇总


4.1 tb_user表(用户信息表)

4.2 tb_product表(商品信息表)


4.3 tb_productType表（商品类型表）


4.4 tb_order表（订单表）


4.5 tb_userAccount表（用户资金流水表）


4.6 tb_review表（评论表）


4.7 tb_province表（省份数据字典）


4.8 tb_city表（城市数据字典）


4.9 tb_productSize表（商品型号表）



4.10 tb_productColor表（商品颜色表）

5. 安全性设计
5.1 防止用户直接操作数据库的方法
用户只能用帐号登陆到应用软件，通过相应的功能访问数据库，而没有其他途径操作数据库。
5.2 角色与权限
提示：确定每个角色对数据库表的操作权限，如创建、检索、更新、删除等。每个角色拥有刚好能够完成任务的权限，不多也不少。在应用时再为用户分配角色，则每个用户的权限等于他所兼角色的权限之和。



6. 优化
提示：分析并优化数据库的“时－空”效率，尽可能地“提高处理速度”并且“降低数据占用空间”。
（1）分析“时－空”效率的瓶颈，找出优化对象（目标），并确定优先级。
（2）当优化对象（目标）之间存在对抗时，给出折衷方案。
（3）给出优化的具体措施，例如优化数据库环境参数，对表格进行反规范化处理等。



7. 数据库管理与维护说明
提示：在设计数据库的时候，及时给出管理与维护本数据库的方法，有助于将来撰写出正确完备的用户手册。


附录

一、创建数据库
/*创建用户*/
Create user lizhehui identified  by 123
二、创建表
/*创建tb_user表*/
create table tb_user(
  userID number primary key,
  name varchar2(20) not null unique,
  password varchar2(30) not null,
  email varchar2(30),
  provinceID number,
  cityID number,
  telephone char(11),
  sex char(3) default'男',
  age number,
  birthday date,
  money number default'0',
  photo varchar2(500),
  dsp varchar2(200),
  qq varchar2(15),
  msn varchar2(50),
  loveBook varchar2(200),
  loveMusic varchar2(200),
  loveMovie varchar2(200),
  loveSport varchar2(200),
  loveGame varchar2(200));
/*创建tb_product表*/
create table tb_product(
  productID number primary key,
  userID number not null,
  productName varchar2(50) not null,
  typeID number not null,
  price number not null,
  photo varchar2(500),
  information varchar2(500),
  foreign key(userID) references tb_user(userID));
/*创建tb_productType表*/
create table tb_productType(
  productTypeID number primary key,
  productTypeName varchar2(100) not null);
/*创建tb_order表*/
 (orderState,orderID) 
create table tb_order(
  orderID number primary key,
  toID number not null,
  colorID number not null,
  productID number not null,
  address varchar2(100) not null,
  telephone char(11) not null,
  orderState number not null,
  count number not null,
  price number not null,
  orderDate date not null,
  consignmentDate date not null,
  foreign key(toID) references tb_user(userID),
  foreign key(productID) references tb_product(productID));
/*创建tb_userAccount表*/
create table tb_userAccount(
  userAccountID number primary key,
  userID number not null,
  orderID number not null,
  type number not null,
  time date not null,
  foreign key(userID) references tb_user(userID),
  foreign key(orderID) references tb_order(orderID));
/*创建tb_review表*/
create table tb_review(
  reviewID number primary key,
  review varchar2(250) not null,
  isReply char(10) default'false',
  isDel char(10) default'false',
  senderID number not null,
  productID number not null,
  addTime date not null,
  replyID number,
  foreign key(senderID) references tb_user(userID),
  foreign key(productID) references tb_product(productID));
/*创建tb_province表*/
create table tb_province(
  provinceID number primary key,
  provinceName varchar2(30) not null);
/*创建tb_city表*/
create table tb_city(
  cityID number primary key,
  provinceID number not null,
  cityName varchar2(30) not null,
  foreign key(provinceID) references tb_province(provinceID));
/*创建tb_productSize表*/
create table tb_productSize(
  productSizeID number primary key,
  productSize varchar2(20) not null,
  productID number not null,
  foreign key(productID) references tb_product(productID));
/*创建tb_productColor表*/
create table tb_productColor(
  productColorID number primary key,
  productColor varchar2(20) not null,
  stockpile number not null,
  productSizeID number not null,
  Foreign key(productSizeID) references tb_productSize(productSizeID));

三、添加约束
/*给每个表添加约束*/
alter table tb_user add foreign key(cityID) references tb_city(cityID);

alter table tb_product add foreign key(typeID) references tb_productType(productTypeID);

alter table tb_order add foreign key(colorID) references tb_productColor(productColorID);


基础数据(商品类型+省份+城市)添加
（注：因序列定义时是从一开始，所以第一项要使用当前序列号输入数据，在使用当前序列号之前要想调用下一个序列号，当前序列号才能使用）
序列的创建：
create sequence seqtb_user start with 1 increment by 1;
create sequence seqtb_product start with 1 increment by 1;
create sequence seqtb_productType start with 1 increment by 1;
create sequence seqtb_order start with 1 increment by 1;
create sequence seqtb_userAccount start with 1 increment by 1;
create sequence seqtb_review start with 1 increment by 1;
create sequence seqtb_province start with 1 increment by 1;
create sequence seqtb_city start with 1 increment by 1;
create sequence seqtb_productSize start with 1 increment by 1;
create sequence seqtb_productColor start with 1 increment by 1;
/*基础数据(商品类型+省份+城市)添加*/
/*tb_productType表添加商品类型*/
select seqtb_productType.NEXTVAL from dual;
insert into tb_productType values(seqtb_productType.currval,'电器');
insert into tb_productType values(seqtb_productType.nextval,'食品');
/*tb_province表添加省份名称*/
select seqtb_province.NEXTVAL from dual;
insert into tb_province values(seqtb_province.currval,'山东');
insert into tb_province values(seqtb_province.nextval,'广东');
insert into tb_province values(seqtb_province.nextval,'北京');
/*tb_city表给山东省添加城市名称*/

select seqtb_city.nextval from dual;
insert into tb_city values(seqtb_city.currval,1,'济南');
insert into tb_city values(seqtb_city.nextval,1,'青岛');
insert into tb_city values(seqtb_city.nextval,3,'中关村');
insert into tb_city values(seqtb_city.nextval,2,'广州');
五、用户数据(注册+信息完善)添加
/*用户数据(注册+信息完善)添加*/
/*tb_user表添加用户信息*/
select seqtb_user.nextval from dual;
insert into tb_user values(seqtb_user.currval,'李哲辉','123456'，null，1，2，'11111111','男',20,to_date('1997-05-02','yyyy-mm-dd'),1000,null,null,null,null,null,null,null,null,null);
insert into tb_user values(seqtb_user.nextval,'张三','654321'，null，2，4，'22222222','男',31,to_date('1986-10-08','yyyy-mm-dd'),10000,null,null,null,null,null,null,null,null,null);
insert into tb_user values(seqtb_user.nextval,'王丽','123123'，null，3，3，'33333333','女',19,to_date('1998-07-20','yyyy-mm-dd'),1500,null,null,null,null,null,null,null,null,null);
insert into tb_user values(seqtb_user.nextval,'王二','456456'，null，1，1，'44444444','男',29,to_date('1988-11-07','yyyy-mm-dd'),15000,null,null,null,null,null,null,null,null,null);
insert into tb_user values(seqtb_user.nextval,'赵一','456123'，null，1，1，'55555555','男',30,to_date('1987-03-14','yyyy-mm-dd'),12000,null,null,null,null,null,null,null,null,null);
六、商品信息(商品信息+型号+颜色)添加
/*商品信息(商品信息+型号+颜色)添加*/
/*tb_product表添加商品信息*/
select seqtb_product.nextval from dual;
insert into tb_product values(seqtb_product.currval,4,'华为P10',1,3788,'D:/photo/huawei','屏幕尺寸5.1英寸后置摄像头,2000万像素');
insert into tb_product values(seqtb_product.nextval,4,'三星MZ-7KE256B 850pro',1,899,'D:/photo/sanxing','十年质保,高速读写,MLC颗粒');
insert into tb_product values(seqtb_product.nextval,5,'三只松鼠碧根果',2,20,'D:/photo/songshu','红鼻子节定制款');
insert into tb_product values(seqtb_product.nextval,5,'百草味熟食白芝麻猪肉脯',2,16,'D:/photo/zhuroupu','肉味浓郁,嚼劲十足,美味组合,醇香美味');

/*tb_productSize表添加商品型号*/
select seqtb_productSize.nextval from dual;
insert into tb_productSize values(seqtb_productSize.currval,'64G',1);
insert into tb_productSize values(seqtb_productSize.nextval,'32G',1);
insert into tb_productSize values(seqtb_productSize.nextval,'256G',2);
insert into tb_productSize values(seqtb_productSize.nextval,'奶油口味',3);
insert into tb_productSize values(seqtb_productSize.nextval,'原味',4);
/*tb_productColor表添加商品型号*/
select seqtb_productColor.nextval from dual;
insert into tb_productColor values(seqtb_productColor.currval,'曜石黑',50,1);
insert into tb_productColor values(seqtb_productColor.nextval,'玫瑰金',23,1);
insert into tb_productColor values(seqtb_productColor.nextval,'陶瓷白',30,2);
insert into tb_productColor values(seqtb_productColor.nextval,'黑色',95,3);
insert into tb_productColor values(seqtb_productColor.nextval,'见商品',120,4);
insert into tb_productColor values(seqtb_productColor.nextval,'见商品',80,5);

七、删除用户信息
/*删除用户****/
（注：此题是最后做的将买家张三的所有有关信息删除）
tb_user表触发器
create or replace trigger user_order
after delete on tb_user
for each row
begin
  delete from tb_order where toID=:old.userID;
end;
/
create or replace trigger user_userAccount
after delete on tb_user
for each row
begin
  delete from tb_userAccount where userID=:old.userID;
end;
/
tb_order表触发器
create or replace trigger order_userAccount
after delete on tb_order
for each row
begin 
  delete from tb_userAccount where orderID=:old.orderID;
end;/
删除用户张三




八、商品信息查询
/*商品信息查询*/
/*单表查询*/
/*查询tb_product表中商品id为的商品信息*/


/*查询tb_productSize表中商品id为的型号信息*/


/*查询tb_productColor表中商品型号id为、、的颜色与库存信息*/


/*多表查询*/
/*用户在商城以商品类型查询一件商品的名称*/


/*用户在商城以商品名称查询一件商品的所有信息*/


九、用户信息查询
/*用户信息查询*/
/*用户在商城可以查询已知用户(或卖家)的基本信息*/


用户下订单并确认付款（应用）
(注：订单状态 0为未付款1为已付款2为发货3为延后发货4为收货5为未收货)
/*用户下订单并确认付款(应用事务)*/
/*用户***想要购买卖家***的产品颜色-大小-产品名*/
/*定义变量,用于存储本次订单的物品单价*/
/*定义变量,用于存储本次订单的物品ID*/
/*定义变量,用于存储本次订单的颜色ID*/
/*定义变量,用于存储本次订单的买家ID*/
/*定义变量,用于存储流水表的用户ID*/
/*用户****下订单*/
/*用户****将订单信息填入到tb_order表中*/
		--orderState订单状态为用户选择填入下订单(买家付款后自动转为已付款,买家付款后卖家可选择修改为延后,卖家发货后选择修改为发货,买家未付款时卖家可选择修改为撤销,买家收到货物后可选择修改为完成)
/*下订单后减少商品库存*/

declare 
ord_danprice number;
ord_proid number;
ord_colorid number;
ord_userid number;
ord_toid number;
ord_num number;
ord_sheng number;
ord_city number;
ord_cityname tb_city.cityName%type;
ord_phone tb_user.telephone%type;
begin
ord_userid:=&买家ID;
ord_toid:=&卖家ID;
ord_proid:=&产品ID;
ord_colorid:=&颜色ID;
ord_danprice:=&单价;
ord_num:=&数量;
select cityID into ord_city from tb_user where userID=ord_userid;
select cityName into ord_cityname from tb_city where cityID=ord_city;
select telephone into ord_phone from tb_user where userID=ord_userid;
select stockpile into ord_sheng from tb_productColor where productColorID=ord_colorid;
if ord_sheng>=ord_num then
begin
insert into tb_order values(seqtb_order.nextval,ord_userid,ord_colorid,ord_proid,ord_cityname,ord_phone,'00',ord_num,ord_num*ord_danprice,sysdate,sysdate+3);
update tb_productColor set stockpile=stockpile-ord_num
where productColorID=ord_colorid;
end;
else 
dbms_output.put_line('库存不足');
end if;
end;
/


/*确认付款后减少用户余额*/pppppp
/*将用户付款的资金冻结后订单状态改为已付款*/
/*用户账户上的钱转账完成后建立用户资金流水表一条买家购买商品支出记录*/
declare
ord_userid number;
ord_proid number;
timee date;
fukuan number;
m number;
um number;
dingid number;
begin
ord_userid:=&买家ID;
ord_proid:=&产品ID;
fukuan:=&是否付款;
select sysdate into timee from dual;
select price into m from tb_order where productID=ord_proid and toID=ord_userid;
select money-m into um from tb_user where userID=ord_userid;
select order into dingid from tb_userAccount where productID=ord_proid and toID=ord_userid;
if fukuan=1 then
if um>=0 then
begin
update tb_user set money=money-m
where userid=ord_userid;
update tb_order set orderState=1
where toID=ord_userid;
insert into tb_userAccount values(seqtb_userAccount.nextval,ord_userid,dingid,1,timee);
end;
else
dbms_output.put_line('余额不足');
end if;
end if;
end;
/


十一、买家对订单信息进行修改（包括发货后的订单状态修改及修改商品颜色时应用事务）
/*卖家对订单信息进行修改*/
/*假设买家***想修改商品的颜色，则需要应用事务，对相应颜色的库存进行修改*/
/*修改信息是各项信息均为可选择项，如不想修改某项信息，则选择以前的选项，但是会将数据重复的修改一次，即用相同的数据来覆盖之前的数据*/
/*除此之外卖家发货后可将订单状态改为发货*/
/*定义变量,用于存储本次订单的物品单价*/
/*修改tb_order表中的送货地址*/
/*修改tb_order表中的联系方式*/
/*修改tb_order表中的状态*/
	--若卖家因故不能发货，但已付款则卖家可修改订单状态为'延后'
/*修改tb_order表中的商品颜色*/
/*修改tb_order表中的商品总价*/
	--若和买家商议后买家同意降价，但商品信息上还是不修改的，就可以在订单总价上修改，付款后卖家修改总价，差价打回买家账户余额内
/*将与之前的差价加回买家账户余额内*/
/*修改tb_user表中买家的账户余额*/
/*修改颜色后要将之前选择的颜色库存加一再讲修改后的颜色库存减一*/
declare 
gai_add tb_order.address%type;
gai_phone tb_order.telephone%type;
gai_color number;
gai_proid number;
gai_price number;
gai_orderid number;
temp number;
id number;
chaprice number;
shuliang number;
yuancolor number;
begin 
gai_orderid:=&请输入订单号;
gai_color:=&想要更改为的颜色号;
gai_proid:=&想要更改为的商品号;
gai_add:='&想要更改为的地址';
gai_phone:=&想要更改为的联系方式;
gai_price:=&想要更改为的价格;
temp:=&是否可以发货2发货3延后发货;
update tb_order set orderState=temp where orderID=gai_orderid;
select price-gai_price into chaprice from tb_order where orderID=gai_orderid;
select toID into id from tb_order where orderID=gai_orderid;
select count into shuliang from tb_order where orderID=gai_orderid;
select colorID into yuancolor from tb_order where orderID=gai_orderid;
update tb_order set colorID=gai_color where orderID=gai_orderid;
update tb_order set productID=gai_proid where orderID=gai_orderid;
update tb_order set address=gai_add where orderID=gai_orderid;
update tb_order set telephone=gai_phone where orderID=gai_orderid;
update tb_order set price=gai_price where orderID=gai_orderid;
update tb_user set money=money+chaprice where userID=id;
update tb_productColor set stockpile=stockpile+shuliang where productColorID=yuancolor;
update tb_productColor set stockpile=stockpile-shuliang where productColorID=gai_color;
end;

更改前


更改后



十二、订单完成进行转账
/*订单完成进行转账*/
/*定义变量,用于存储流水表的用户ID*/
/*定义变量,用于存储本次订单的物品单价*/
/*买家收到商品后，修改tb_order表中的状态*/
/*订单状态为'完成'后建立用户资金流水表一条卖家出售商品收入记录*/
/*交易成功后卖家账户余额增加*/
declare 
temp number;
mai_shangid number;
mai_id number;
mai_price number;
mai_orderid number;
timee date;
begin 
mai_orderid:=&你的订单号;
temp:=&是否收货4收货5未收货;
update tb_order set orderState=temp where orderID=mai_orderid;
select productID into mai_shangid from tb_order where orderID=mai_orderid;
select userID into mai_id from tb_product where productID=mai_shangid;
select sysdate into timee from dual;
select price into mai_price from tb_order where orderID=mai_orderid;
if temp=4 then
begin
insert into tb_userAccount values(seqtb_userAccount.nextval,mai_id,mai_orderid,1,timee);
update tb_user set money=money+mai_price where userID=mai_id;
end;
end if;
end;
执行


收货前卖家余额

收货后卖家余额

十三、货物丢件进行退款
/*货物丢件进行退款*/
/*前提条件:订单为发货状态，但物流出现丢件情况，由物流赔偿卖家，卖家确认丢件情况发生后，可进行退款操作*/
/*定义变量,用于存储流水表的用户ID*/
/*卖家确认商品丢件后，修改tb_order表中的状态*/
/*订单状态为'撤销'后建立用户资金流水表一条买家商品退款收入记录*/
/*撤销成功后买家账户余额恢复*/
declare
temp number;
pei_orderid number;
pei_id number;
pei_price number;
timee date;
begin 
pei_orderid:=&你的订单号;
temp:=&是否撤销6撤销7不撤销;
update tb_order set orderState=temp where orderID=pei_orderid;
select toID into pei_id from tb_order where orderID=pei_orderid;
select price into pei_price from tb_order where orderID=pei_orderid;
if temp=6 then 
begin 
insert into tb_userAccount values(seqtb_userAccount.nextval,pei_id,pei_orderid,3,sysdate);
update tb_user set money=money+pei_price where userID=pei_id;
end;
end if;
end;
执行


撤销前余额

撤销后余额


十四、视图
--/*多表查询*/
--/*用户在商城以商品类型查询一件商品的名称*/
create view Type_name(productTypeName,productName)
as
select tb_productType.productTypeName,tb_product.productName
from tb_productType,tb_product
where tb_productType.productTypeID=tb_product.typeID

declare 
name Type_name.productTypeName%type;
temp Type_name%rowtype;
cursor curl(name Type_name.productTypeName%type)
is
select * from Type_name
where productTypeName=name;
begin 
name:='&商品类型名';
open curl(name);
loop
  fetch curl into temp;
  exit when curl%notfound;
  dbms_output.put_line('商品名:'||temp.productName);
end loop;
close curl;
end;

--/*用户在商城以商品名称查询一件商品的所有信息*/
create view pro_value
as
select tb_product.productID,tb_product.userID,tb_product.productName,tb_product.typeID,tb_product.price,tb_product.photo,tb_product.information,tb_productType.productTypeName,tb_productSize.productSizeID,tb_productSize.productSize
from tb_productSize,tb_product,tb_productType
where tb_product.productID=tb_productSize.productID and tb_product.typeID=tb_productType.productTypeID;

declare 
name pro_value.productName%type;
temp pro_value%rowtype;
cursor cur1(name pro_value.productName%type)
is
select * from pro_value
where productName=name;
begin 
name:='&商品名';
open cur1(name);
loop
  fetch cur1 into temp;
  exit when cur1%notfound;
  dbms_output.put_line('商品ID:'||temp.productID||' 卖家ID:'||temp.userID||' 商品名:'||temp.productName||' 商品类型ID:'||temp.typeID||' 商品价格:'||temp.price||' 商品类型:'||temp.productTypeName||' 商品型号:'||temp.productSize);
end loop;
close cur1;
end;

--/*用户信息查询*/
--/*用户在商城可以查询已知用户(或卖家)的基本信息*/
create view user_basic
as 
select tb_user.userID,tb_user.name,tb_user.provinceID,tb_user.cityID,tb_user.telephone,tb_user.sex,tb_user.age,tb_user.money,tb_province.provinceName,tb_city.cityName
from tb_user,tb_province,tb_city
where tb_user.provinceID=tb_province.provinceID and tb_user.cityID=tb_city.cityID;

declare
username user_basic.name%type;
temp user_basic%rowtype;
begin
username:='&用户姓名';
select * into temp from user_basic
where name=username;
dbms_output.put_line('用户ID:'||temp.userID||' 用户名:'||temp.name||' 所在省:'||temp.provinceName||' 所在市:'||temp.cityName||' 手机号:'||temp.telephone||' 性别:'||temp.sex||' 年龄:'||temp.age||' 余额:'||temp.money);
end;


十五、用户登录(选做) 例如:sql server 格式:
/*用户登录(应用存储过程)*/ 
create procedure proc_land
@resultName int = 0,	--定义为表示用户名错误
@resultPassWord int =0,	--定义为表示密码错误
@userName nvarchar(10) = '***',  
@PassWord nvarchar(30) = 'jhc123'   
as
select @resultName = COUNT(1) from tb_user where name=@userName									--只要表中有输入的用户名则为表示用户名存在
select @resultPassWord = COUNT(1) from tb_user where name=@userName and [password]=@PassWord	--若存在的这个用户的信息里的密码等与输入的密码则为表示密码核对无误
begin
if @resultName = 1 and @resultPassWord = 1
	print '用户登录成功！'
else if @resultName = 0
	print '用户名错误！'
else if @resultPassWord = 0
	print '密码错误！'
end
（oracle 实训用户登录代码如下）
create or replace procedure proc_land(username in tb_user.name%type,userpass in tb_user.password%type)
is
resultName number:=0;
resultPassWord number:=0;
begin
  select count(1) into resultName from tb_user where name=username;
  select count(1) into resultPassWord from tb_user where password=userpass and name=username;
  if resultName=1 and resultPassWord=1 then
  dbms_output.put_line('用户登陆成功!');
  else if resultName=0 then 
  dbms_output.put_line('用户名错误!');
  else if resultPassWord=0 then
  dbms_output.put_line('密码错误!');
end if;
end if;
end if;
end;
/



执行
declare 
username tb_user.name%type;
userpass tb_user.password%type;
begin 
username:='&用户名';
userpass:='&密码';
  proc_land(username,userpass);
end;
/



