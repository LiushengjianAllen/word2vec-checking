Oracle数据库实训任务书
一、实训目标
通过项目实战，理解数据库的基本概念，熟悉Oracle的基本操作，创建用户、表、检查约束，编写SQL语句执行数据库查询、新增、修改、删除，为Java、.Net开发提供数据存储及数据操作的基础。
课程要求从两个方面的能力目标实现，素养目标要求学员在通过学习具备相对应的学习技能、素养要求；技术目标要求学员必须掌握课程产品所定义的知识与技能。
（1）素养目标
分析需求的能力；
问题解决能力、总结归纳能力。
（2）技术目标
操作Oracle的能力；
SQL语句编写的能力。

二、实训内容（见附录）


三、实训进度安排
按教学计划规定，该设计总学时数为1周，其进度及时间大致分配如下：


四、考核评定













 
青岛科技大学
《Oracle数据库实训》




题目     网上商城购物系统       





指导教师：        徐美娇          
姓    名：        王春发          
学    号：        1508060301      
班    级：          软件153         
		专    业：         软件工程       
地    点：青科大崂山校区弘毅楼c408
		时    间：   2017.6.20 至 2017.6.24  


一、需求规格说明
1 文档介绍
文档目的
本需求分析规格说明书的目的是为软件开发和客户之间就“网上购物平台”项目提供需求范围和需求内容的规定。
通过此文档向客户展示他们对项目的理解，并且当规格说明书得到用户确认后，它将成为开发此软件在进行项目设计、实现、测试和实施过程中唯一的需求规范。
1.2 文档范围
文档包括，对产品的介绍，产品面向的用户群体，产品遵循的规范，产品中的角色，产品范围，业务流程，各功能模块的划分，以及各模块包含的子功能，产品的功能性需求和非功能性需求。
1.3 读者对象
需求的合法读者：支持本项目的徐美娇老师，开发成员，项目负责人，系统设计人员，数据库设计人员，编码人员，软件测试人员，客户。
1.4 参考文档
1.5 术语与缩写解释










2 产品介绍
在社会竞争日益激烈的今天，我们面临越来越多的工作和生活压力，随之而来的就是自身的休息时间逐渐减少，从而有很多的大众没有时间或者宁愿节省时间去工作、加班，受到生活环境和时间的限制，有很多人没有时间去购物或者宁愿珍惜自己的休息时间去好好休整。为了改变这种状况，越来越多的人选择在网上购物，节省大量的时间。
随着互联网的发展，人们对互联网购物的要求也在不断提高，这就要求商城网站不单只做单纯的买卖平台，还要提供更多的，更方便的功能来满足人们的需求。
本应用系统应达到的目标概述如下：
为用户们提供一个拥有大量选择的平台，使那些需要节省大量时间的用户以最少的时间选择自己最需要的物品，并物有所值。
3 产品面向的用户群体
本产品最终面向的用户群是以全龄，以网络购物为目的的用户。主要给那些不愿出门购物或没有时间购物为主的人提供一个节省购物时间的平台，在这里用户可以找到各类物品，易于比较并节省大量时间。
本产品不适用于年龄太小、不以网络购物为主要目的的其它网民。

4产品应当遵循的标准或规范
本软件的开发完全按照企业标准开发。数据命名的规则遵循《语言编程规约》中相关的规定，软件开发遵循国际通用CMMI标准。
5 产品范围
本产品最终面向的用户群是以网络购物为主要目的的用户，通过本网络使用户通过搜索、选择产品、购入、评价等方式实现网络购物的目的。
6 产品中的角色







7 产品的功能性需求
7.1 业务整体规划
7.1.1 整体业务用例图



















7.1.2 整体功能划分
在本系统中，主要包括用户、卖家和管理员三个角色。本系统初期重点突出用户的管理的权限，具体用户的权限如下：
用户自我管理。主要包括新用户的注册、登录和退出登录以及用户基本信息的管理三个部分，实现用户的相关自我的一些基本操作。
查看商品。实现用户对商品的搜索查看等功能。
收藏夹。实现用户对商品的收藏。
购买商品。实现用户对商品的购买。
评价商品。实现用户收货后对商品的评价。
管理员权限如下：
商品管理。体现管理员对各卖家的商品进行管理，如发现不合格商品，马上下架。
支付宝。体现用户和卖家之间的桥梁，用户收到货物后管理员将用户打到支付宝的钱转到卖家卡上。
举报管理。实现用户对卖家的投诉，核实实情，解决用户与卖家的矛盾，如果卖家货物不合格，则将卖家账号整顿，合格后继续上架。
7.2 用户自我管理


















用例描述：

















7.3搜查商品
















7.4收藏商品















7.5购买商品


















7.6评价商品
















7.7订单管理














7.8订单管理


























7.9商品管理














7.10划账管理


















7.11投诉管理

















8 软硬件环境需求

9 产品质量需求






二、数据库设计
0. 文档介绍
0.1 文档目的
本文档是SNS交友社区项目的第二阶段，本阶段主要解决系统用到的数据库的设计问题，数据库设计的根据是前一阶段形成的《系统需求规格说明书》，根据《系统规格说明书》中对系统的描述，确定系统涉及到的数据库表。
本系统设计的数据库表是进行系统开发的基础，在数据库设计的基础上可以进行系统的详细设计。在以后的软件测试以及软件维护阶段也可参考此说明书，以便于了解在数据库设计阶段中设计的各个表的信息，或在下一阶段修改时找出在本阶段设计的不足或错误。
 
0.2 文档范围
文档包括：数据库环境说明，数据库命名规则，逻辑设计，物理设计，安全设计，数据库优化，数据库管理和维护说明等信息。
0.3 读者对象
数据库设计报告书的合法读者系统设计人员，数据库设计人员，编码人员，软件测试人员，客户。
0.5 术语与缩写解释



1. 数据库环境说明
本系统采用Oracle数据库系统
2. 数据库的命名规则
（1）、表名以tb_开头，当表名中含有两个以上的英文单词时，单词间不加空格，但是从第二个单词开始的单词首字母要大写。
	（2）、表中的字段名首字母小写，字段名中含有两个以上的英文单词时，单词间不加空格，但是从第二个单词开始的单词首字母要大写。
3. 逻辑设计
详细设计略。
4. 物理设计
4.0 表汇总


4.1 tb_user表(用户信息表)

4.2 tb_product表(商品信息表)


4.3 tb_productType表（商品类型表）


4.4 tb_order表（订单表）


4.5 tb_userAccount表（用户资金流水表）


4.6 tb_review表（评论表）


4.7 tb_province表（省份数据字典）


4.8 tb_city表（城市数据字典）


4.9 tb_productSize表（商品型号表）



4.10 tb_productColor表（商品颜色表）

5. 安全性设计
5.1 防止用户直接操作数据库的方法
用户只能用帐号登陆到应用软件，通过相应的功能访问数据库，而没有其他途径操作数据库。
5.2 角色与权限
提示：确定每个角色对数据库表的操作权限，如创建、检索、更新、删除等。每个角色拥有刚好能够完成任务的权限，不多也不少。在应用时再为用户分配角色，则每个用户的权限等于他所兼角色的权限之和。



6. 优化
提示：分析并优化数据库的“时－空”效率，尽可能地“提高处理速度”并且“降低数据占用空间”。
（1）分析“时－空”效率的瓶颈，找出优化对象（目标），并确定优先级。
（2）当优化对象（目标）之间存在对抗时，给出折衷方案。
（3）给出优化的具体措施，例如优化数据库环境参数，对表格进行反规范化处理等。



7. 数据库管理与维护说明
提示：在设计数据库的时候，及时给出管理与维护本数据库的方法，有助于将来撰写出正确完备的用户手册。


附录
注意:代码下附上图示

一、创建数据库
/*创建用户*/

create user tea  identified by 123;
grant connect,resource to tea;

二、创建表
/*创建tb_user表*/
create table tb_user(
userID 	number primary key,
names 	varchar2(50) unique,
password 	varchar2(30) not null,
email 	varchar2(30),
provinceID 	number,
cityID 	number,;
telephone	 char(11),
sex  char(3) default '男',
age	 number,
birthday date,
money	 number  default '0' check(money>0),
photo	 varchar2(500),
dsp      varchar2(200),
qq	 varchar2(15),
msn      varchar2(50),
loveBook  varchar2(200),
loveMusic	 varchar2(200),
loveMovie	 varchar2(200),
loveSport	 varchar2(200),
loveGame	 varchar2(200)
)
/*创建tb_product表*/
create table tb_product(
productID	 number  primary key,
userID	 number not null,
productName	 	varchar2(50) not null,
typeID	 	number not null,
price	 	number not null,
photo	 	varchar2(500),
information	 	varchar2(500)
)
/*创建tb_productType表*/
create table tb_productType(
productTypeID	 	number primary key,
productTypeName	 	varchar2(100) not null
)


/*创建tb_order表*/
 (orderState,orderID) 
create table tb_order(
orderID	 number primary key,
toID	 	number not null,
colorID number not null,
productID	 number not null,
address	 varchar2(100) not null,
telephone char(11) not null,
orderState	 number not null,
count number not null,
price	 number not null,
orderDate	 date not null,
consignmentDate	 date not null
)
/*创建tb_userAccount表*/
create table tb_userAccount(
userAccountID	 number primary key,
userID	 number not null,
orderID	 number not null,
type	 number not null,
time	 date not null
)
/*创建tb_review表*/
create table tb_review(
reviewID	 number primary key,
review	 varchar2(250) not null,
isReply	 varchar2(10) default 'false' not null,
isDel	 varchar2(10) default 'false' not null,
senderID	 number not null,
productID	 number not null,
addTime	 date not null,
replyID	 number
)
/*创建tb_province表*/
create table tb_province(
provinceID	 number primary key,
provinceName	 varchar2(30) not null
)
/*创建tb_city表*/
create table tb_city(
cityID	 number primary key,
provinceID	 number not null,
cityName	 varchar2(30) not null
);
/*创建tb_productSize表*/
create table tb_productSize(
productSizeID	 number primary key,
productSize	 varchar2(20) not null,
productID	 number not null
)
/*创建tb_productColor表*/
create table tb_productColor(
productColorID	 number primary key,
productColor	 varchar2(20) not null,
stockpile	 number not null check(stockpile>0),
productSizeID	 number not null
)

三、添加约束
/*给每个表添加约束*/
约束 tb_user表
create sequence count_userID start with 1 
increment by 1;
create or replace trigger trigger_tb_user_userID  
  before insert on tb_user    
  for each row     
begin     
  select count_userID.nextval into :new.userID from dual;  
end; 

alter table tb_user
add constraint fk_user_city_cityID 
foreign key(cityID) references tb_city(cityID)

tb_product表
create sequence count_productID start with 1 
increment by 1;
create or replace trigger trigger_tb_product_productID  
  before insert on tb_product 
  for each row     
begin     
  select count_productID.nextval into :new.productID from dual;  
end;
alter table tb_product
add constraint fk_product_user_userID 
foreign key(userID) references tb_user(userID)
add constraint fk_product_pType_pTypeID 
foreign key(typeID) references tb_productType(productTypeID)

tb_productType表
create sequence count_pTID start with 1 
increment by 1;
create or replace trigger trigger_tb_pT_pTID  
  before insert on  tb_productType    
  for each row     
begin     
  select count_pTID.nextval into :new.productTypeID from dual;  
end; 

tb_order表
create sequence count_orderID start with 1;
increment by 1;
create or replace trigger trigger_tb_order_orderID  
  before insert on  tb_order   
  for each row     
begin     
  select count_orderID.nextval into :new.orderID from dual;  
end; 
alter table tb_order
add constraint fk_order_user_userID
foreign key(toid) references tb_user(userID)
add constraint fk_order_pC_pCID
foreign key(colorID) references tb_productColor(productColorID)
add constraint fk_order_product_pID
foreign key(productID) references tb_product(productID)

tb_userAccount表
create sequence count_uAID start with 1
increment by 1
create or replace trigger trigger_tb_uA_uAID  
  before insert on  tb_userAccount 
  for each row     
begin     
  select count_uAID.nextval into :new.userAccountID from dual;  
end;
alter table tb_userAccount
add constraint fk_uA_user_userID
foreign key(userID) references tb_user(userID)
add constraint fk_uA_order_orderID
foreign key(orderID) references tb_order(orderID)


tb_review表
create sequence count_reviewID start with 1
increment by 1;
create or replace trigger trigger_tb_review_reviewID  
  before insert on  tb_review 
  for each row     
begin     
  select count_reviewID.nextval into :new.reviewID from dual;  
end;
alter table tb_review
add constraint fk_review_user_userID
foreign key(senderID) references tb_user(userID)
add constraint fk_review_product_productID
foreign key(productID) references tb_product(productID)

tb_province表
create sequence count_provinceID start with 1
increment by 1;
create or replace trigger trigger_tb_province_provinceID  
  before insert on  tb_province
  for each row     
begin     
  select count_provinceID.nextval into :new.provinceID from dual;  
end;

tb_city表
create sequence count_cityID start with 1
increment by 1;
create or replace trigger trigger_tb_city_cityID  
  before insert on  tb_city
  for each row     
begin     
  select count_cityID.nextval into :new.cityID from dual;  
end;
alter table tb_city
add constraint fk_city_province_provinceID
foreign key(provinceID) references tb_province(provinceID)

tb_productSize表
create sequence count_pSID start with 1
increment by 1;
create or replace trigger trigger_tb_pS_pSID  
  before insert on  tb_productSize
  for each row     
begin     
  select count_pSID.nextval into :new.productSizeID from dual;  
end;
alter table tb_productSize
add constraint fk_pS_product_productID
foreign key(productID) references tb_product(productID)


tb_productColor表
create sequence count_pCID start with 1
increment by 1;
create or replace trigger trigger_tb_pC_pCID  
  before insert on  tb_productColor
  for each row     
begin     
  select count_pCID.nextval into :new.productColorID from dual;  
end;
alter table tb_productColor
add constraint fk_pC_pS_pSID
foreign key(productSizeID) references tb_productSize(productSizeID)



四、基础数据(商品类型+省份+城市)添加
/*基础数据(商品类型+省份+城市)添加*/
/*tb_productType表添加商品类型*/
insert into tb_productType(productTypeName) values('家用电器');
insert into tb_productType(productTypeName) values('电脑');

/*tb_province表添加省份名称*/
insert into tb_province(provinceName) values('山东');
insert into tb_province(provinceName) values('江苏');


/*tb_city表给山东省添加城市名称*/
insert into tb_city(provinceID,cityName) values(1,'潍坊');
insert into tb_city(provinceID,cityName) values(1,'青岛');
insert into tb_city(provinceID,cityName) values(2,'南京');
insert into tb_city(provinceID,cityName) values(2,'苏州');



五、用户数据(注册+信息完善)添加
/*用户数据(注册+信息完善)添加*/
/*tb_user表添加用户信息*/
insert into tb_user(name,password) values('王春发'，'123');
insert into tb_user(name,password) values('小明'，'123');
insert into tb_user(name,password) values('小红'，'123');
insert into tb_user(name,password) values('小白'，'123');

六、商品信息(商品信息+型号+颜色)添加
/*商品信息(商品信息+型号+颜色)添加*/
/*tb_product表添加商品信息*/
insert into tb_product(userID,productName,typeID,price) values(1,'TCL曲面电视',1,4999);
insert into tb_product(userID,productName,typeID,price) values(1,'格力中央空调',1,3333);
insert into tb_product(userID,productName,typeID,price) values(1,'苹果笔记本电脑',2,8888);
insert into tb_product(userID,productName,typeID,price) values(1,'戴尔台式电脑',2,12222);


/*tb_productSize表添加商品型号*/
insert into tb_productSize(productSize,productID) values('55英寸',1);
insert into tb_productSize(productSize,productID) values('吸顶式',2);
insert into tb_productSize(productSize,productID) values('便携式',2);
insert into tb_productSize(productSize,productID) values('13.3英寸',3);
insert into tb_productSize(productSize,productID) values('15.6英寸',3);
insert into tb_productSize(productSize,productID) values('酷睿i5',4);
insert into tb_productSize(productSize,productID) values('酷睿i7',4);


/*tb_productColor表添加商品型号*/
insert into tb_productColor(productColor,stockpile,productSizeID) values('亮黑色',9999,1)；
insert into tb_productColor(productColor,stockpile,productSizeID) values('月光白',8888,2);
insert into tb_productColor(productColor,stockpile,productSizeID) values('红色',7777,3);
insert into tb_productColor(productColor,stockpile,productSizeID) values('橙色',6666,4);
insert into tb_productColor(productColor,stockpile,productSizeID) values('黄色',5555,5);
insert into tb_productColor(productColor,stockpile,productSizeID) values('绿色',4444,6);
insert into tb_productColor(productColor,stockpile,productSizeID) values('蓝色',3333,7);
insert into tb_productColor(productColor,stockpile,productSizeID) values('白色',9999,1);
insert into tb_productColor(productColor,stockpile,productSizeID) values('金色',8888,2);
insert into tb_productColor(productColor,stockpile,productSizeID) values('蓝色',7777,3);
insert into tb_productColor(productColor,stockpile,productSizeID) values('银色',6666,4);
insert into tb_productColor(productColor,stockpile,productSizeID) values('橙色',5555,5);
insert into tb_productColor(productColor,stockpile,productSizeID) values('绿色',4444,6);
insert into tb_productColor(productColor,stockpile,productSizeID) values('青色',3333,7);

七、删除用户信息
/*删除用户****/
create or replace trigger t_userDel
after delete on tb_user
for each row
begin

delete from tb_userAccount
where userID=:old.userID;

delete from tb_order
where toID=:old.userID;

end;

delete from tb_user
where userID=2;


八、商品信息查询
/*商品信息查询*/

/*单表查询*/
/*查询tb_product表中商品id为的商品信息*/
select * from tb_product
where productID=1;



/*查询tb_productSize表中商品id为的型号信息*/
select * from tb_productSize
where productSizeID=1;



/*查询tb_productColor表中商品型号id为、、的颜色与库存信息*/
select * from tb_productColor
where productSizeID=1;



/*多表查询*/
/*用户在商城以商品类型查询一件商品的名称*/
select productName
from tb_product a join tb_productType b on a.typeID=b.productTypeID
where productTypeName='家用电器'




/*用户在商城以商品名称查询一件商品的所有信息*/
select a.productName,a.price,b.productTypeName,c.productSize,d.productColor,d.stockpile

from tb_product a join tb_productType b on a.typeID=b.productTypeID join tb_productSize c on a.productID=c.productID join tb_productColor d on c.productSizeID=d.productSizeID

where a.productName=’TCL曲面电视’;



九、用户信息查询
/*用户信息查询*/
/*用户在商城可以查询已知用户(或卖家)的基本信息*/
select name,email,sex,age,qq
from tb_user
Where name=’王春发’;


十、用户下订单并确认付款（应用）
/*用户下订单并确认付款(应用事务)*/
/*用户***想要购买卖家***的产品颜色-大小-产品名*/
apColor varchar2(20);
apSize varchar2(20);
apName varchar2(50);

/*定义变量,用于存储本次订单的物品单价*/
singleprice number;
/*定义变量,用于存储本次订单的物品ID*/
aproductID number;


/*定义变量,用于存储本次订单的颜色ID*/
acolorID number;
/*定义变量,用于存储本次订单的买家ID*/
atoID number;
/*定义变量,用于存储流水表的用户ID*/
waterID number;
/*用户****下订单*/
/*用户****将订单信息填入到tb_order表中*/
		--orderState订单状态为用户选择填入下订单(买家付款后自动转为已付款,买家付款后卖家可选择修改为延后,卖家发货后选择修改为发货,买家未付款时卖家可选择修改为撤销,买家收到货物后可选择修改为完成)
insert into tb_order values(1,atoID,acolorID,aproductID,aaddress,atelephone,0,acount,sumprice,sysdate,sysdate);

/*下订单后减少商品库存*/
   update tb_productColor set stockpile=stockpile-1
   where productColorID=acolorID ;



/*确认付款后减少用户余额*/
   update tb_user set money=money-sumprice
   where userID=atoID;

/*将用户付款的资金冻结后订单状态改为已付款*/

   select count_orderID.currval into aorderID from dual;
   update tb_order set orderState=1
   where orderID=aorderID;

/*用户账户上的钱转账完成后建立用户资金流水表一条买家购买商品支出记录*/
insert into tb_userAccount values(1,atoID,aorderID,0,sysdate);

完整代码
declare
n number;
aorderID number;
singleprice number;
sumprice number;
aproductID number;
acolorID number;
atoID number;
waterID number;
apColor varchar2(20);
apSize varchar2(20);
apName varchar2(50);
auName varchar2(100);
apassword varchar2(20);
aaddress varchar2(100);
atelephone char(11);
acount number;
aorderDate date;
begin

apName:='&商品名称';
apColor:='&商品颜色';
apSize:='&商品型号';
aaddress:='&送货地址';
atelephone:='&联系电话';
acount:=&购买数量;
auName:='&用户名';
apassword:='&密码';

n:=login('王春发','123');
if n=1 then

begin

select userID into atoID from tb_user
where name=auName;

   select c.productColorID,a.productID,a.price into acolorID,aproductID,singleprice
   from tb_product a join tb_productSize b on a.productID=b.productID join tb_productColor c on b.productSizeID=c.productSizeID
   where productColor=apColor and productSize=apSize and productName=apName;

sumprice:=singleprice*acount;


   update tb_productColor set stockpile=stockpile-1
   where productColorID=acolorID ;


insert into tb_order values(1,atoID,acolorID,aproductID,aaddress,atelephone,0,acount,sumprice,sysdate,sysdate);

   
   update tb_user set money=money-sumprice
   where userID=atoID;

   select count_orderID.currval into aorderID from dual;
   update tb_order set orderState=1
   where orderID=aorderID;

   insert into tb_userAccount values(1,atoID,aorderID,0,sysdate);


end;
else
dbms_output.put_line('登陆失败');
end if;

end;

//用户登录函数
create or replace function login(sname varchar2,spassword varchar2)
return number
is 
n number;
begin
select count(*) into n from tb_user
where name=sname and password=spassword;
if n=1 then 
return 1;
else
return 0;
end if;
end;



十一、买家对订单信息进行修改（包括发货后的订单状态修改及修改商品颜色时应用事务）
/*卖家对订单信息进行修改*/
/*假设买家***想修改商品的颜色，则需要应用事务，对相应颜色的库存进行修改*/
/*修改信息是各项信息均为可选择项，如不想修改某项信息，则选择以前的选项，但是会将数据重复的修改一次，即用相同的数据来覆盖之前的数据*/
/*除此之外卖家发货后可将订单状态改为发货*/
/*定义变量,用于存储本次订单的物品单价*/
bsumprice number;


/*修改tb_order表中的送货地址*/
baddress varchar2(100);
baddress:=&地址;
update tb_order set address=baddress
where orderID=borderID;

/*修改tb_order表中的联系方式*/
btelephone char(11);
btelephone:=&电话;
update tb_order set telephone=btelephone
where orderID=borderID;


/*修改tb_order表中的状态*/
	--若卖家因故不能发货，但已付款则卖家可修改订单状态为'延后'
borderState:=&订单状态;
update tb_order set orderState=borderState
where orderID=borderID;


/*修改tb_order表中的商品颜色*/

bproductColor varchar2(20);
bproductColor:='&商品颜色';

update tb_order set colorID=bpColorID
where orderID=borderID;

update tb_productColor set stockpile=stockpile-1
where productColorID=bpColorID;
update tb_productColor set stockpile=stockpile+1
where productColorID=boldColorID;



/*修改tb_order表中的商品总价*/
	--若和买家商议后买家同意降价，但商品信息上还是不修改的，就可以在订单总价上修改，付款后卖家修改总价，差价打回买家账户余额内
bsumprice number;
bsumprice:=&总价;



/*将与之前的差价加回买家账户余额内*/
charge:=primeCost-bsumprice;
update tb_user set money=money+charge
where userID=btoID;
/*修改tb_user表中买家的账户余额*/
update tb_user set money=money+charge
where userID=btoID;



/*修改颜色后要将之前选择的颜色库存加一再讲修改后的颜色库存减一*/
update tb_productColor set stockpile=stockpile-1
where productColorID=bpColorID;
update tb_productColor set stockpile=stockpile+1
where productColorID=boldColorID;
完整代码
declare
baddress varchar2(100);
borderID number;
btelephone char(11);
borderState number;
bproductColor varchar2(20);
bsumprice number;
begin
borderID:=&订单编号;
baddress:=&地址;
btelephone:=&电话;
borderState:=&订单状态;
bproductColor:='&商品颜色';
bsumprice:=&总价;

update tb_order set address=baddress
where orderID=borderID;

update tb_order set telephone=btelephone
where orderID=borderID;

update tb_order set orderState=borderState
where orderID=borderID;

update tb_order set price=bsumprice
where orderID=borderID;

changePrice(borderID,bsumprice);
changeColor(borderID,bproductColor);


end;

create or replace procedure changePrice(borderID number,bsumprice number)
is
primeCost number;
charge number;
btoID number;
begin
select price into primeCost from tb_order
where orderID=borderID;
charge:=primeCost-bsumprice;

update tb_order set price=bsumprice
where orderID=borderID;

select toID into btoID from tb_order
where orderID=borderID;
update tb_user set money=money+charge
where userID=btoID;

end;



create or replace procedure changeColor(borderID number,bproductColor varchar2)
is 
bpID number;
bpSizeID number;
boldColorID number;
bpColorID number;
bpColor varchar2(20);

begin

select productID into bpID from tb_order
where orderID=borderID;
select productSizeID into  bpSizeID  from tb_productSize
where productID=bpID;
select productColor,productColorID into bpColor,bpColorID from tb_productColor
where productSizeID=bpSizeID and productColor=bpColor;

select colorID into boldColorID from tb_order
where orderID=borderID;

update tb_order set colorID=bpColorID
where orderID=borderID;

update tb_productColor set stockpile=stockpile-1
where productColorID=bpColorID;
update tb_productColor set stockpile=stockpile+1
where productColorID=boldColorID;

end;





十二、订单完成进行转账
/*订单完成进行转账*/
/*定义变量,用于存储流水表的用户ID*/
cuserID number;
csailID number;

/*定义变量,用于存储本次订单的物品单价*/
csingleprice number;


/*买家收到商品后，修改tb_order表中的状态*/

update tb_order set orderState=3
where orderID=corderID;


/*订单状态为'完成'后建立用户资金流水表一条卖家出售商品收入记录*/
insert into tb_userAccount values(1,csailID,corderID,1,ctime);


/*交易成功后卖家账户余额增加*/
   update tb_user set money=money-sumprice
   where userID=csailID;

完整代码
declare
a number;
sumprice number;
ctime date;
cuName varchar2(20);
cpassword varchar2(20);
corderID number;
cuserID number;
csailID number;
csingleprice number;
cproductID number;
begin
corderID:=&订单编号;
cuName:='&用户名';

select userID into cuserID from tb_user
where name=cuName;
a:=checkorder(cuserID,corderID);
if a=1 then

update tb_order set orderState=3
where orderID=corderID;

select productID into cproductID from tb_order
where orderID=corderID;
select userID into csailID from tb_product
where productID=cproductID;

select sysdate into ctime from dual;

insert into tb_userAccount values(1,csailID,corderID,1,ctime);

select price into sumprice from tb_order
where orderID=corderID;

   update tb_user set money=money-sumprice
   where userID=csailID;


else
dbms_output.put_line('用户没有此订单');
end if;

end;


create or replace function checkorder(cuserID varchar2,corderID number)
return number
is
n number;
begin
select count(*) into n from tb_userAccount
where userID=cuserID and orderID=corderID;
if n=1 then 
return 1;
else
return 0;
end if;
end;






十三、货物丢件进行退款
/*货物丢件进行退款*/
/*前提条件:订单为发货状态，但物流出现丢件情况，由物流赔偿卖家，卖家确认丢件情况发生后，可进行退款操作*/
/*定义变量,用于存储流水表的用户ID*/
duserID number;


/*卖家确认商品丢件后，修改tb_order表中的状态*/

   update tb_order set orderState=4
   where orderID=dorderID;
/*订单状态为'撤销'后建立用户资金流水表一条买家商品退款收入记录*/
insert into tb_userAccount values(1,duserID,dorderID,2,dtime);

/*撤销成功后买家账户余额恢复*/
select price into dsumprice from tb_order
where orderID=dorderID;
update tb_user set money=money+dsumprice
where userID=duserID;

完整代码
declare
duserID number;
dorderID number;
dsumprice number;
begin
dorderID:=&订单编号;

select toID into duserID from tb_order
where orderID=dorderID;

select price into dsumprice from tb_order
where orderID=dorderID;

cancleorder(duserID,dorderID,dsumprice);

end;


create or replace procedure cancleorder(duserID number,dorderID number,dsumprice number)
is
dtime date;
begin

   update tb_order set orderState=4
   where orderID=dorderID;

select sysdate into dtime from dual;

insert into tb_userAccount values(1,duserID,dorderID,2,dtime);

update tb_user set money=money+dsumprice
where userID=duserID;


end;




十四、视图
--/*多表查询*/
--/*用户在商城以商品类型查询一件商品的名称*/
create view query_pName
as
select productTypeName,productName 
from tb_product a join tb_productType b on a.typeID=b.productTypeID
declare
pTName varchar2(50);
pName varchar2(50);
cursor c_pName(Tname varchar2)
is
select productName 
from query_pName
where productTypeName=pTName;

begin
pTName:='&类型名';
dbms_output.put_line(pTName);
open c_pName(pTName);

loop
fetch c_pName into pName;
exit when c_pName%notfound;
dbms_output.put_line(pName);
end loop;

close c_pName;

end;




--/*用户在商城以商品名称查询一件商品的所有信息*/
create view query_all
as
select a.productName,a.price,b.productTypeName,c.productSize,d.productColor,d.stockpile
from tb_product a join tb_productType b on a.typeID=b.productTypeID join tb_productSize c on a.productID=c.productID join tb_productColor d on c.productSizeID=d.productSizeID

declare 
jr query_all%rowtype;
pName varchar2(50);
cursor c_query_all(epName varchar2)
is
select * from query_all
where productName=epName;
begin

pName:='&产品名称';
open c_query_all(pName);
loop
fetch c_query_all into jr;
exit when c_query_all%notfound;
dbms_output.put_line(jr.productName ||jr.price||jr.productTypeName||jr.productSize||jr.productColor||jr.stockpile);

end loop;

close c_query_all;

end;






--/*用户信息查询*/
--/*用户在商城可以查询已知用户(或卖家)的基本信息*/
create view query_user
as
select name,email,sex,age,qq
from tb_user;


create view query_user
as
select name,email,sex,age,qq
from tb_user;

declare
jr query_user%rowtype;
euName varchar2(20);
cursor c_query_user(uName varchar2)
is
select * from query_user
where name=uName;

begin
euName:='&用户名称';
open c_query_user(euName);
loop 
fetch c_query_user into jr;
exit when c_query_user%notfound;
dbms_output.put_line(jr.name||jr.email||jr.sex||jr.age||jr.qq);
end loop;
close c_query_user;

end;






十五、用户登录(选做) 例如:sql server 格式:
 declare

auName varchar2(100);
apassword varchar2(20);
n number;
begin
auName:='&用户名';
apassword:='&密码';

n:=login(auName,apassword);
if n=1 then
dbms_output.put_line('登陆成功');
else
dbms_output.put_line('登陆失败');
end if;

end;


//用户登录函数
create or replace function login(sname varchar2,spassword varchar2)
return number
is 
n number;
begin
select count(*) into n from tb_user
where name=sname and password=spassword;
if n=1 then 
return 1;
else
return 0;
end if;
end;







