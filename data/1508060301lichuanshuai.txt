Oracle数据库实训任务书
一、实训目标
通过项目实战，理解数据库的基本概念，熟悉Oracle的基本操作，创建用户、表、检查约束，编写SQL语句执行数据库查询、新增、修改、删除，为Java、.Net开发提供数据存储及数据操作的基础。
课程要求从两个方面的能力目标实现，素养目标要求学员在通过学习具备相对应的学习技能、素养要求；技术目标要求学员必须掌握课程产品所定义的知识与技能。
（1）素养目标
分析需求的能力；
问题解决能力、总结归纳能力。
（2）技术目标
操作Oracle的能力；
SQL语句编写的能力。

二、实训内容（见附录）


三、实训进度安排
按教学计划规定，该设计总学时数为1周，其进度及时间大致分配如下：


四、考核评定













 
青岛科技大学
《Oracle数据库实训》




题目     网上商城购物系统       





指导教师：        徐美娇          
姓    名：     李传帅                   
学    号：    1508060316                    
班    级：      软件153                    
		专    业：      软件工程                  
地    点：青科大崂山校区弘毅楼c408
		时    间：   2017.6.20 至 2017.6.24  


一、需求规格说明
1 文档介绍
文档目的
本需求分析规格说明书的目的是为软件开发和客户之间就“网上购物平台”项目提供需求范围和需求内容的规定。
通过此文档向客户展示他们对项目的理解，并且当规格说明书得到用户确认后，它将成为开发此软件在进行项目设计、实现、测试和实施过程中唯一的需求规范。
1.2 文档范围
文档包括，对产品的介绍，产品面向的用户群体，产品遵循的规范，产品中的角色，产品范围，业务流程，各功能模块的划分，以及各模块包含的子功能，产品的功能性需求和非功能性需求。
1.3 读者对象
需求的合法读者：支持本项目的徐美娇老师，开发成员，项目负责人，系统设计人员，数据库设计人员，编码人员，软件测试人员，客户。
1.4 参考文档
1.5 术语与缩写解释










2 产品介绍
在社会竞争日益激烈的今天，我们面临越来越多的工作和生活压力，随之而来的就是自身的休息时间逐渐减少，从而有很多的大众没有时间或者宁愿节省时间去工作、加班，受到生活环境和时间的限制，有很多人没有时间去购物或者宁愿珍惜自己的休息时间去好好休整。为了改变这种状况，越来越多的人选择在网上购物，节省大量的时间。
随着互联网的发展，人们对互联网购物的要求也在不断提高，这就要求商城网站不单只做单纯的买卖平台，还要提供更多的，更方便的功能来满足人们的需求。
本应用系统应达到的目标概述如下：
为用户们提供一个拥有大量选择的平台，使那些需要节省大量时间的用户以最少的时间选择自己最需要的物品，并物有所值。
3 产品面向的用户群体
本产品最终面向的用户群是以全龄，以网络购物为目的的用户。主要给那些不愿出门购物或没有时间购物为主的人提供一个节省购物时间的平台，在这里用户可以找到各类物品，易于比较并节省大量时间。
本产品不适用于年龄太小、不以网络购物为主要目的的其它网民。

4产品应当遵循的标准或规范
本软件的开发完全按照企业标准开发。数据命名的规则遵循《语言编程规约》中相关的规定，软件开发遵循国际通用CMMI标准。
5 产品范围
本产品最终面向的用户群是以网络购物为主要目的的用户，通过本网络使用户通过搜索、选择产品、购入、评价等方式实现网络购物的目的。
6 产品中的角色







7 产品的功能性需求
7.1 业务整体规划
7.1.1 整体业务用例图



















7.1.2 整体功能划分
在本系统中，主要包括用户、卖家和管理员三个角色。本系统初期重点突出用户的管理的权限，具体用户的权限如下：
用户自我管理。主要包括新用户的注册、登录和退出登录以及用户基本信息的管理三个部分，实现用户的相关自我的一些基本操作。
查看商品。实现用户对商品的搜索查看等功能。
收藏夹。实现用户对商品的收藏。
购买商品。实现用户对商品的购买。
评价商品。实现用户收货后对商品的评价。
管理员权限如下：
商品管理。体现管理员对各卖家的商品进行管理，如发现不合格商品，马上下架。
支付宝。体现用户和卖家之间的桥梁，用户收到货物后管理员将用户打到支付宝的钱转到卖家卡上。
举报管理。实现用户对卖家的投诉，核实实情，解决用户与卖家的矛盾，如果卖家货物不合格，则将卖家账号整顿，合格后继续上架。
7.2 用户自我管理


















用例描述：

















7.3搜查商品
















7.4收藏商品















7.5购买商品


















7.6评价商品
















7.7订单管理














7.8订单管理


























7.9商品管理














7.10划账管理


















7.11投诉管理

















8 软硬件环境需求

9 产品质量需求






二、数据库设计
0. 文档介绍
0.1 文档目的
本文档是SNS交友社区项目的第二阶段，本阶段主要解决系统用到的数据库的设计问题，数据库设计的根据是前一阶段形成的《系统需求规格说明书》，根据《系统规格说明书》中对系统的描述，确定系统涉及到的数据库表。
本系统设计的数据库表是进行系统开发的基础，在数据库设计的基础上可以进行系统的详细设计。在以后的软件测试以及软件维护阶段也可参考此说明书，以便于了解在数据库设计阶段中设计的各个表的信息，或在下一阶段修改时找出在本阶段设计的不足或错误。
 
0.2 文档范围
文档包括：数据库环境说明，数据库命名规则，逻辑设计，物理设计，安全设计，数据库优化，数据库管理和维护说明等信息。
0.3 读者对象
数据库设计报告书的合法读者系统设计人员，数据库设计人员，编码人员，软件测试人员，客户。
0.5 术语与缩写解释



1. 数据库环境说明
本系统采用Oracle数据库系统
2. 数据库的命名规则
（1）、表名以tb_开头，当表名中含有两个以上的英文单词时，单词间不加空格，但是从第二个单词开始的单词首字母要大写。
	（2）、表中的字段名首字母小写，字段名中含有两个以上的英文单词时，单词间不加空格，但是从第二个单词开始的单词首字母要大写。
3. 逻辑设计
详细设计略。
4. 物理设计
4.0 表汇总


4.1 tb_user表(用户信息表)

4.2 tb_product表(商品信息表)


4.3 tb_productType表（商品类型表）


4.4 tb_order表（订单表）


4.5 tb_userAccount表（用户资金流水表）


4.6 tb_review表（评论表）


4.7 tb_province表（省份数据字典）


4.8 tb_city表（城市数据字典）


4.9 tb_productSize表（商品型号表）



4.10 tb_productColor表（商品颜色表）

5. 安全性设计
5.1 防止用户直接操作数据库的方法
用户只能用帐号登陆到应用软件，通过相应的功能访问数据库，而没有其他途径操作数据库。
5.2 角色与权限
提示：确定每个角色对数据库表的操作权限，如创建、检索、更新、删除等。每个角色拥有刚好能够完成任务的权限，不多也不少。在应用时再为用户分配角色，则每个用户的权限等于他所兼角色的权限之和。



6. 优化
提示：分析并优化数据库的“时－空”效率，尽可能地“提高处理速度”并且“降低数据占用空间”。
（1）分析“时－空”效率的瓶颈，找出优化对象（目标），并确定优先级。
（2）当优化对象（目标）之间存在对抗时，给出折衷方案。
（3）给出优化的具体措施，例如优化数据库环境参数，对表格进行反规范化处理等。



7. 数据库管理与维护说明
提示：在设计数据库的时候，及时给出管理与维护本数据库的方法，有助于将来撰写出正确完备的用户手册。


附录
注意:代码下附上图示

一、创建数据库
/*创建用户*/


二、创建表
/*创建tb_user表*/

create table tb_user(
userID number primary key,
name varchar2(20) unique not null,
passward varchar2(30) not null,
email varchar2(30),
provinceID number,
cityID number,
telephone char(11),
sex char(3) default'男',
age number ,
birthday date,
money number default'0',
photo varchar2(500),
dsq varchar2(500),
qq varchar2(15),
msn varchar2(50),
loveBook varchar2(200),
loveMusic varchar2(200),
loveMovie varchar2(200),
loveSport varchar2(200),
loveGame varchar2(200)
)


/*创建tb_product表*/
create table tb_product(
productID number primary key,
userID number not null,
productName varchar2(50) not null,
typeID number,
price number not null,
photo varchar2(50),
information varchar2(200)
)


/*创建tb_productType表*/
create table tb_productType(
productTypeID number primary key,
productTypeName varchar2(30)
)

/*创建tb_order表*/
create table tb_order(
orderID number primary key,
toID number not null,
colorID number not null,
productID number not null,
address varchar2(200) not null,
telephone char(11) not null,
orderState number not null,
count number not null,
price number not null,
orderDate date not null,
consignmentDate date not null
)

/*创建tb_userAccount表*/	
create table tb_userAccount(
userAccountID number primary key,
userID number not null,
orderID number not null,
type number not null,
time date not null)


/*创建tb_review表*/
create table tb_review(
reviewID number primary key,
review varchar2(200) not null,
isReply char(20) default'false',
isDel char(20) default'false',
senderID number not null,
productID number not null,
addTime date not null,
replyID number 
)


/*创建tb_province表*/
create table tb_province(
provinceID number primary key,
provinceName varchar2(30) not null)


/*创建tb_city表*/
create table tb_city(
cityID number primary key,
provinceID number not null,
cityName varchar2(30) not null)

/*创建tb_productSize表*/
create table tb_productSize(
productSizeID number primary,
productSize varchar2(20) not null,
productID number not null )


/*创建tb_productColor表*/
create table tb_productColor(
productColorID number primary key,
productColor varchar2(20) not null,
stockpile number not null,
productSizeID number not null)


三、添加约束
/*给每个表添加约束*/
create sequence userID increment by 1 start with 1 maxvalue 9999;
alter table tb_user ADD CONSTRAINT pk_cityid foreign key(cityID) references tb_city(cityID);

create sequence productID increment by 1 start with 1 maxvalue 9999;
alter table tb_product ADD CONSTRAINT pk_userid foreign key(userID) references tb_user(userID);
alter table tb_product ADD CONSTRAINT pk_typeid foreign key(typeID) references tb_productType(productTypeID);

create sequence productTypeID increment by 1 start with 1 maxvalue 9999;

create sequence orderID increment by 1 start with 1 maxvalue 9999;
alter table tb_order ADD CONSTRAINT pk_toID foreign key(toID) references tb_user(userID);
alter table tb_order ADD CONSTRAINT pk_colorID foreign key(colorID) references tb_productColor(productColorID);
alter table tb_order ADD CONSTRAINT pk_productID foreign key(productID) references tb_product(productID);

create sequence userAccountID increment by 1 start with 1 maxvalue 9999;
alter table tb_userAccount ADD CONSTRAINT pk_accountuserID foreign key(userID) references tb_user(userID);
alter table tb_userAccount ADD CONSTRAINT pk_orderID foreign key(orderID) references tb_order(orderID);

create sequence reviewID increment by 1 start with 1 maxvalue 9999;
alter table tb_review ADD CONSTRAINT pk_senderID foreign key(senderID) references tb_user(userID);
alter table tb_review ADD CONSTRAINT pk_review_productID foreign key(productID) references tb_product(productID);

create sequence provinceID increment by 1 start with 1 maxvalue 9999;

create sequence cityID increment by 1 start with 1 maxvalue 9999;
alter table tb_city ADD CONSTRAINT pk_city_proID foreign key(provinceID) references tb_province(provinceID);

create sequence productSizeID increment by 1 start with 1 maxvalue 9999;
alter table tb_productSize ADD CONSTRAINT pk_size_pID foreign key(productID) references tb_product(productID);

create sequence productColorID increment by 1 start with 1 maxvalue 9999;
alter table tb_productColor ADD CONSTRAINT pk_color_psize foreign key(productSizeID) references tb_productSize(productSizeID);

四、基础数据(商品类型+省份+城市)添加
/*基础数据(商品类型+省份+城市)添加*/
/*tb_productType表添加商品类型*/
insert into tb_productType values (PRODUCTTYPEID.NEXTVAL,'手机');
insert into tb_productType values (PRODUCTTYPEID.NEXTVAL,'电脑');
insert into tb_productType values (PRODUCTTYPEID.NEXTVAL,'笔记本');



/*tb_province表添加省份名称*/

insert into tb_province values (PRODUCTTYPEID.NEXTVAL,'山东');
insert into tb_province values (PRODUCTTYPEID.NEXTVAL,'山西');
insert into tb_province values (PRODUCTTYPEID.NEXTVAL,'河北');




/*tb_city表给山东省添加城市名称*/
insert into tb_city values (PRODUCTTYPEID.NEXTVAL,'32','青岛');
insert into tb_city values (PRODUCTTYPEID.NEXTVAL,'33','太原');
insert into tb_city values (PRODUCTTYPEID.NEXTVAL,'34','石家庄');



五、用户数据(注册+信息完善)添加
/*用户数据(注册+信息完善)添加*/
/*tb_user表添加用户信息*/
insert into tb_user(userID,name,passward) values (PRODUCTTYPEID.NEXTVAL,'buy','971009');
insert into tb_user(userID,name,passward) values (PRODUCTTYPEID.NEXTVAL,'sell','971009');
insert into tb_user(userID,name,passward) values (PRODUCTTYPEID.NEXTVAL,'ceshi','971009');



六、商品信息(商品信息+型号+颜色)添加
/*商品信息(商品信息+型号+颜色)添加*/
/*tb_product表添加商品信息*/
insert into tb_product(productID,userID,productName,typeID,price) values (PRODUCTTYPEID.NEXTVAL,'43','手机','29','100');
insert into tb_product(productID,userID,productName,typeID,price) values (PRODUCTTYPEID.NEXTVAL,'43','电脑','30','100');
insert into tb_product(productID,userID,productName,typeID,price) values (PRODUCTTYPEID.NEXTVAL,'43','笔记本','31','100');


/*tb_productSize表添加商品型号*/


insert into tb_productSize(productSizeID,productSize,productID) values (PRODUCTTYPEID.NEXTVAL,'xl','46');
insert into tb_productSize(productSizeID,productSize,productID) values (PRODUCTTYPEID.NEXTVAL,'l','47');
insert into tb_productSize(productSizeID,productSize,productID) values (PRODUCTTYPEID.NEXTVAL,'m','48');







/*tb_productColor表添加商品型号*/
insert into tb_productColor(productColorID,productColor,stockpile,productSizeID) values (PRODUCTTYPEID.NEXTVAL,'red','10','51');
insert into tb_productColor(productColorID,productColor,stockpile,productSizeID) values (PRODUCTTYPEID.NEXTVAL,'red','20','52');
insert into tb_productColor(productColorID,productColor,stockpile,productSizeID) values (PRODUCTTYPEID.NEXTVAL,'red','30','53');


七、删除用户信息
/*删除用户****/
create  trigger del_user
 before delete on tb_user for each row
begin
 delete from tb_userAccount
 where userid=:old.userid;
end;
delete from tb_user
where userid=44;

八、商品信息查询
/*商品信息查询*/
/*单表查询*/
/*查询tb_product表中商品id为46的商品信息*/
declare
p_id number;
P_name varchar2(50);
p_price number;
p_typeID number;
begin
p_id:=&输入商品ID;
select ProductName,price ,typeID into P_name,p_price,p_typeID from tb_product where PRODUCTID=p_id;
DBMS_OUTPUT.PUT_LINE('商品名：'||p_name||'
价格：'||p_price||'
类别:'||p_typeID );
end;



/*查询tb_productSize表中商品id为51的型号信息*/
declare
ps_id number;
Ps_size varchar2(50);
p_id number;
begin
p_id:=&输入商品ID;
select productSizeID,productSize,productID into ps_id,Ps_size,p_id from tb_productSize where PRODUCTID=p_id;
DBMS_OUTPUT.PUT_LINE('型号ID：'||ps_id||'
尺寸：'||Ps_size||'
商品ID:'||p_id );
end;



/*查询tb_productColor表中商品型号id为51的颜色与库存信息*/
declare
pc_id number;
Pc_color varchar2(50);
pc_stock number;
begin
pc_id:=&输入商品ID;
select productColor,stockPile into Pc_color,pc_stock from tb_productColor where productSizeID=pc_id;
DBMS_OUTPUT.PUT_LINE('颜色：'||Pc_color||'
库存：'||pc_stock);
end;



/*多表查询*/
/*用户在商城以商品类型查询一件商品的名称*/

create or replace procedure select_pname(p_typeid in number)
is
  p_name varchar2(50 byte);
  cursor cc
  is
    select p.productName from tb_product p join tb_productType pt on p.typeId=pt.PRODUCTTYPEID where pt.PRODUCTTYPEID=p_typeid;
begin
 open cc;
 loop
  fetch cc into p_name;
  exit when cc%notfound;
  DBMS_OUTPUT.PUT_LINE('商品名:  '||p_name);
 end loop;
  close cc;
end; 


declare
p_typeid number;
begin 
  p_typeid:=&输入类型ID;
  select_pname(p_typeid);
end;




/*用户在商城以商品名称查询一件商品的所有信息*/
declare 
p_name varchar2(50);
p_typename varchar2(30);
p_id number;
u_id number;
 p_price number;
  p_color varchar2(50);
  stockpile number;
cursor cur85
is
select  tb_product.productname,tb_producttype.producttypename,
tb_product.productid,tb_product.userid,tb_product.price,tb_productcolor.productcolor,tb_productcolor.stockpile
into p_name ,p_typename ,p_id ,u_id , p_price,  p_color ,  stockpile 
from tb_product,tb_producttype,tb_PROductcolor,tb_productsize
where productname=p_name 
and tb_producttype.producttypeid=tb_product.typeid 
and tb_product.productid=tb_productsize.productsizeid
and tb_productcolor.productsizeid=tb_productsize.productsizeid;
begin 
p_name :='&输入商品名称';
open cur85;
loop
fetch cur85 into p_name,p_typename ,p_id ,u_id , p_price,  p_color ,  stockpile ;
exit when cur85%notfound;
dbms_output.put_line('
商品名:'|| p_name ||'类别名:'|| p_typename||'尺寸:'|| p_price|| '颜色:'|| p_color ||'库存:'|| stockpile   );
end loop;
close cur85;
end;


九、用户信息查询
/*用户信息查询*/
/*用户在商城可以查询已知用户(或卖家)的基本信息*/
Create procedure select_user(user_id in number)
is
  uname varchar2(20);
  uemail varchar2(30);
  usex char(10);
  uage number;
  begin
  select name,email,sex,age into uname,uemail,usex,uage from tb_user where userId=user_id;
  DBMS_OUTPUT.PUT_LINE('姓名：'||uname||'邮箱：'||uemail||'性别:'||usex||'年龄:'||uage);
  end;

declare 
  user_id number;
  begin
  user_id:=&输入用户ID;
  select_user(user_id);
  end;




十、用户下订单并确认付款（应用）
/*用户下订单并确认付款(应用事务)*/
/*用户***想要购买卖家***的产品颜色-大小-产品名*/


/*定义变量,用于存储本次订单的物品单价*/

Declare order_price number;

/*定义变量,用于存储本次订单的物品ID*/

Declare order_pid number;
/*定义变量,用于存储本次订单的颜色ID*/

Declare order_colorId number;

/*定义变量,用于存储本次订单的买家ID*/
Declare order_buyid number;

/*定义变量,用于存储流水表的用户ID*/
Declare order_buyid number;


/*用户****下订单*/
/*用户****将订单信息填入到tb_order表中*/
		--orderState订单状态为用户选择填入下订单(买家付款后自动转为已付款,买家付款后卖家可选择修改为延后,卖家发货后选择修改为发货,买家未付款时卖家可选择修改为撤销,买家收到货物后可选择修改为完成)


/*下订单后减少商品库存*/
count_price number;
p_count number; 
select price*p_count into count_price from TB_PRODUCT where productID=order_pid;
update tb_productColor set stockpile=stockpile-p_count where productColorID=order_colorId; 



/*确认付款后减少用户余额*/
/*将用户付款的资金冻结后订单状态改为已付款*/
/*用户账户上的钱转账完成后建立用户资金流水表一条买家购买商品支出记录*/

if is_pay=0
   then 
   insert into  tb_order values (ORDERID.NEXTVAL,order_buyid,order_colorID,order_pid,user_address,user_telephone,'未付款',p_count,count_price,sysdate,sysdate+1);
   update tb_productColor set stockpile=stockpile-p_count where productColorID=order_colorId;
   if sql%rowcount=1
   then commit;
   end if;
   else
   insert into  tb_order values (ORDERID.NEXTVAL,order_buyid,order_colorID,order_pid,user_address,user_telephone,'已付款',p_count,count_price,sysdate,sysdate+1);
   insert into  TB_USERACCOUNT values (USERACCOUNTID.NEXTVAL,order_buyid,ORDERID.CURRVAL,1,sysdate);
   update tb_user set money=money-count_price where userID=order_buyid;
   update tb_productColor set stockpile=stockpile-p_count where productColorID=order_colorId;
   update tb_user set money=money+count_price where userID=(select userID from TB_PRODUCT where productID=order_pid);
   if sql%rowcount=5
   then commit;
   end if;
   end if; 


十一、买家对订单信息进行修改（包括发货后的订单状态修改及修改商品颜色时应用事务）
/*卖家对订单信息进行修改*/
/*假设买家***想修改商品的颜色，则需要应用事务，对相应颜色的库存进行修改*/
/*修改信息是各项信息均为可选择项，如不想修改某项信息，则选择以前的选项，但是会将数据重复的修改一次，即用相同的数据来覆盖之前的数据*/
/*除此之外卖家发货后可将订单状态改为发货*/
/*定义变量,用于存储本次订单的物品单价*/
declare 
order_price number;

/*修改tb_order表中的送货地址*/
create procedure modify_address(order_id in number,new_address in varchar2)
is
begin
 update tb_order set address=new_address where orderID=order_id;
 commit;
end;


declare 
order_id number;
new_address varchar2(100);
begin
   order_id:=56;
   new_address:='山东济南';
   modify_address(order_id,new_address);
end;


/*修改tb_order表中的联系方式*/
create procedure modify_tel(order_id in number,new_tel in number)
is
begin
 update tb_order set telephone=new_tel where orderID=order_id;
 commit;
end;




declare 
order_id number;
new_tel number;
begin
   order_id:=56;
   new_tel:=88888888;
   modify_tel(order_id,new_tel);
end;

/*修改tb_order表中的状态*/
	--若卖家因故不能发货，但已付款则卖家可修改订单状态为'延后'
create procedure modify_state(order_id in number,new_state in varchar2)
is
begin
 update tb_order set orderState=new_state where orderID=order_id;
 commit;
end;

declare 
order_id number;
new_state varchar2(20);
begin
   order_id:=56;
   new_state:='延后';
   modify_state(order_id,new_state);
end;


/*修改tb_order表中的商品颜色*/

create or replace procedure modify_color(order_id in number,new_colorid in number)
is
begin
 update tb_order set colorId=new_colorId where orderID=order_id;
 commit;
end;

declare 
order_id number;
new_colorid number;
begin
   order_id:=&输入订单号;
   new_colorid:=&输入新颜色号;
   modify_collor(order_id,new_colorid);
end;




/*修改tb_order表中的商品总价*/
	--若和买家商议后买家同意降价，但商品信息上还是不修改的，就可以在订单总价上修改，付款后卖家修改总价，差价打回买家账户余额内

/*将与之前的差价加回买家账户余额内*/
/*修改tb_user表中买家的账户余额*/
create  procedure modify_prices(order_id in number,new_price in number)
is
  old_price number;
  buy_id number;
  sell_id number;
  begin
  select price into old_price from tb_order where orderId=order_id;
  select toid into buy_id from tb_order where orderId=order_id;
  select p.userID into sell_id from TB_PRODUCT p join tb_order o on p.productId=o.productId;
  update tb_user set money=money+old_price-new_price where userId=buy_id;
  update tb_user set money=money-old_price+new_price where userId=sell_id;
  commit;
  end;

declare 
order_id number;
new_price number;
begin
  order_id:=&订单号;
  new_price:=&新的价格;
  modify_prices(order_id,new_price);
end;

/*修改颜色后要将之前选择的颜色库存加一再讲修改后的颜色库存减一*/
createTRIGGER order_t1
  AFTER UPDATE ON tb_order 
  FOR EACH ROW
BEGIN
  if :new.colorID!=:old.colorID
  then 
  update tb_productColor
  set STOCKPILE=STOCKPILE-1
  where productColorID=:new.colorID;
  update tb_productColor
  set STOCKPILE=STOCKPILE+1
  where productColorID=:old.colorID;
  end if;
END;



十二、订单完成进行转账
/*订单完成进行转账*/
/*定义变量,用于存储流水表的用户ID*/
u_id number;


/*定义变量,用于存储本次订单的物品单价*/

p_price number;

/*买家收到商品后，修改tb_order表中的状态*/
/*订单状态为'完成'后建立用户资金流水表一条卖家出售商品收入记录*/
/*交易成功后卖家账户余额增加*/

create  procedure modify_state(order_id in number,is_accept in number)
is
u_id number;
p_price number;
begin
 if is_accept=1
 then 
   select p.userId into u_id from tb_order o join tb_product p on o.PRODUCTID=p.PRODUCTID where orderId=order_id;
   select price into p_price from tb_order where orderId=order_id;
   update tb_order set orderState='完成';
   insert into tb_userAccount values(USERACCOUNTID.NEXTVAL,u_id,order_id,0,sysdate);
   if sql%rowcount>1
   then
   commit;
   end if;
 end if;
end;

declare 
order_id number;
is_accept number;
begin
  order_id:=&输入订单号;
  is_accept:=&是否收货;
  modify_state(order_id,is_accept);
end;



十三、货物丢件进行退款
/*货物丢件进行退款*/
/*前提条件:订单为发货状态，但物流出现丢件情况，由物流赔偿卖家，卖家确认丢件情况发生后，可进行退款操作*/
/*定义变量,用于存储流水表的用户ID*/

u_id number;

/*卖家确认商品丢件后，修改tb_order表中的状态*/
/*订单状态为'撤销'后建立用户资金流水表一条买家商品退款收入记录*/
/*撤销成功后买家账户余额恢复*/
create  procedure lost(order_id in number,is_lost in number)
is
u_id number;
p_price number;
begin
   select price into p_price from tb_order where orderId=order_id;
   select toid into u_id from tb_order where orderId=order_id;
   if is_lost=1
   then 
     update tb_order set orderState='撤销' where orderId=order_id;
     insert into tb_userAccount values(USERACCOUNTID.NEXTVAL,u_id,order_id,0,sysdate);
     update tb_user set money=money+p_price where userId=u_id;
     if sql%rowcount>2
     then commit;
     end if;
   end if;
end;
  


declare 
order_id number;
is_lost number;
begin
  order_id:=&输入订单号;
  is_lost:=&是否丢件;
  lost(order_id,is_lost);
end;


十四、视图
--/*多表查询*/
--/*用户在商城以商品类型查询一件商品的名称*/
CREATE OR REPLACE VIEW p_name
as
    select p.productName 
    from tb_product p join tb_productType pt on p.typeId=pt.PRODUCTTYPEID 
where pt.PRODUCTTYPEID=29;

 


--/*用户在商城以商品名称查询一件商品的所有信息*/
CREATE VIEW p_v_info
as 
  select distinct p.productid,p.userid,p.productname,p.price,pz.productsize,pc.productcolor,pc.STOCKPILE from tb_product p join tb_productSize pz on p.productID=pz.PRODUCTID
  join tb_productColor pc on pz.productSizeID=pc.PRODUCTSIZEID 
  where p.productName = '手机';


--/*用户信息查询*/
--/*用户在商城可以查询已知用户(或卖家)的基本信息*/

CREATE OR REPLACE VIEW p_user_info
as
  select name,email,sex,age from tb_user where userId=42;






十五、用户登录(选做) 例如:sql server 格式:
/*用户登录(应用存储过程)*/ 
create procedure proc_land
@resultName int = 0,	--定义为表示用户名错误
@resultPassWord int =0,	--定义为表示密码错误
@userName nvarchar(10) = '***',  
@PassWord nvarchar(30) = 'jhc123'   
as
select @resultName = COUNT(1) from tb_user where name=@userName									--只要表中有输入的用户名则为表示用户名存在
select @resultPassWord = COUNT(1) from tb_user where name=@userName and [password]=@PassWord	--若存在的这个用户的信息里的密码等与输入的密码则为表示密码核对无误
begin
if @resultName = 1 and @resultPassWord = 1
	print '用户登录成功！'
else if @resultName = 0
	print '用户名错误！'
else if @resultPassWord = 0
	print '密码错误！'
end






