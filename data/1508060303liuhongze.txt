Oracle数据库实训任务书
一、实训目标
通过项目实战，理解数据库的基本概念，熟悉Oracle的基本操作，创建用户、表、检查约束，编写SQL语句执行数据库查询、新增、修改、删除，为Java、.Net开发提供数据存储及数据操作的基础。
课程要求从两个方面的能力目标实现，素养目标要求学员在通过学习具备相对应的学习技能、素养要求；技术目标要求学员必须掌握课程产品所定义的知识与技能。
（1）素养目标
分析需求的能力；
问题解决能力、总结归纳能力。
（2）技术目标
操作Oracle的能力；
SQL语句编写的能力。

二、实训内容（见附录）


三、实训进度安排
按教学计划规定，该设计总学时数为1周，其进度及时间大致分配如下：


四、考核评定













 
青岛科技大学
《Oracle数据库实训》




题目     网上商城购物系统       





指导教师：        徐美娇          
姓    名：        刘洪泽          
学    号：      1508060306        
班    级：         软件153          
		专    业：       软件工程         
地    点：青科大崂山校区弘毅楼c408
		时    间：   2017.6.20 至 2017.6.24  


一、需求规格说明
1 文档介绍
文档目的
本需求分析规格说明书的目的是为软件开发和客户之间就“网上购物平台”项目提供需求范围和需求内容的规定。
通过此文档向客户展示他们对项目的理解，并且当规格说明书得到用户确认后，它将成为开发此软件在进行项目设计、实现、测试和实施过程中唯一的需求规范。
1.2 文档范围
文档包括，对产品的介绍，产品面向的用户群体，产品遵循的规范，产品中的角色，产品范围，业务流程，各功能模块的划分，以及各模块包含的子功能，产品的功能性需求和非功能性需求。
1.3 读者对象
需求的合法读者：支持本项目的徐美娇老师，开发成员，项目负责人，系统设计人员，数据库设计人员，编码人员，软件测试人员，客户。
1.4 参考文档
1.5 术语与缩写解释










2 产品介绍
在社会竞争日益激烈的今天，我们面临越来越多的工作和生活压力，随之而来的就是自身的休息时间逐渐减少，从而有很多的大众没有时间或者宁愿节省时间去工作、加班，受到生活环境和时间的限制，有很多人没有时间去购物或者宁愿珍惜自己的休息时间去好好休整。为了改变这种状况，越来越多的人选择在网上购物，节省大量的时间。
随着互联网的发展，人们对互联网购物的要求也在不断提高，这就要求商城网站不单只做单纯的买卖平台，还要提供更多的，更方便的功能来满足人们的需求。
本应用系统应达到的目标概述如下：
为用户们提供一个拥有大量选择的平台，使那些需要节省大量时间的用户以最少的时间选择自己最需要的物品，并物有所值。
3 产品面向的用户群体
本产品最终面向的用户群是以全龄，以网络购物为目的的用户。主要给那些不愿出门购物或没有时间购物为主的人提供一个节省购物时间的平台，在这里用户可以找到各类物品，易于比较并节省大量时间。
本产品不适用于年龄太小、不以网络购物为主要目的的其它网民。

4产品应当遵循的标准或规范
本软件的开发完全按照企业标准开发。数据命名的规则遵循《语言编程规约》中相关的规定，软件开发遵循国际通用CMMI标准。
5 产品范围
本产品最终面向的用户群是以网络购物为主要目的的用户，通过本网络使用户通过搜索、选择产品、购入、评价等方式实现网络购物的目的。
6 产品中的角色







7 产品的功能性需求
7.1 业务整体规划
7.1.1 整体业务用例图



















7.1.2 整体功能划分
在本系统中，主要包括用户、卖家和管理员三个角色。本系统初期重点突出用户的管理的权限，具体用户的权限如下：
用户自我管理。主要包括新用户的注册、登录和退出登录以及用户基本信息的管理三个部分，实现用户的相关自我的一些基本操作。
查看商品。实现用户对商品的搜索查看等功能。
收藏夹。实现用户对商品的收藏。
购买商品。实现用户对商品的购买。
评价商品。实现用户收货后对商品的评价。
管理员权限如下：
商品管理。体现管理员对各卖家的商品进行管理，如发现不合格商品，马上下架。
支付宝。体现用户和卖家之间的桥梁，用户收到货物后管理员将用户打到支付宝的钱转到卖家卡上。
举报管理。实现用户对卖家的投诉，核实实情，解决用户与卖家的矛盾，如果卖家货物不合格，则将卖家账号整顿，合格后继续上架。
7.2 用户自我管理


















用例描述：

















7.3搜查商品
















7.4收藏商品















7.5购买商品


















7.6评价商品
















7.7订单管理














7.8订单管理


























7.9商品管理














7.10划账管理


















7.11投诉管理

















8 软硬件环境需求

9 产品质量需求






二、数据库设计
0. 文档介绍
0.1 文档目的
本文档是SNS交友社区项目的第二阶段，本阶段主要解决系统用到的数据库的设计问题，数据库设计的根据是前一阶段形成的《系统需求规格说明书》，根据《系统规格说明书》中对系统的描述，确定系统涉及到的数据库表。
本系统设计的数据库表是进行系统开发的基础，在数据库设计的基础上可以进行系统的详细设计。在以后的软件测试以及软件维护阶段也可参考此说明书，以便于了解在数据库设计阶段中设计的各个表的信息，或在下一阶段修改时找出在本阶段设计的不足或错误。
 
0.2 文档范围
文档包括：数据库环境说明，数据库命名规则，逻辑设计，物理设计，安全设计，数据库优化，数据库管理和维护说明等信息。
0.3 读者对象
数据库设计报告书的合法读者系统设计人员，数据库设计人员，编码人员，软件测试人员，客户。
0.5 术语与缩写解释



1. 数据库环境说明
本系统采用Oracle数据库系统
2. 数据库的命名规则
（1）、表名以tb_开头，当表名中含有两个以上的英文单词时，单词间不加空格，但是从第二个单词开始的单词首字母要大写。
	（2）、表中的字段名首字母小写，字段名中含有两个以上的英文单词时，单词间不加空格，但是从第二个单词开始的单词首字母要大写。
3. 逻辑设计
详细设计略。
4. 物理设计
4.0 表汇总


4.1 tb_user表(用户信息表)

4.2 tb_product表(商品信息表)


4.3 tb_productType表（商品类型表）


4.4 tb_order表（订单表）


4.5 tb_userAccount表（用户资金流水表）


4.6 tb_review表（评论表）


4.7 tb_province表（省份数据字典）


4.8 tb_city表（城市数据字典）


4.9 tb_productSize表（商品型号表）



4.10 tb_productColor表（商品颜色表）

5. 安全性设计
5.1 防止用户直接操作数据库的方法
用户只能用帐号登陆到应用软件，通过相应的功能访问数据库，而没有其他途径操作数据库。
5.2 角色与权限
提示：确定每个角色对数据库表的操作权限，如创建、检索、更新、删除等。每个角色拥有刚好能够完成任务的权限，不多也不少。在应用时再为用户分配角色，则每个用户的权限等于他所兼角色的权限之和。



6. 优化
提示：分析并优化数据库的“时－空”效率，尽可能地“提高处理速度”并且“降低数据占用空间”。
（1）分析“时－空”效率的瓶颈，找出优化对象（目标），并确定优先级。
（2）当优化对象（目标）之间存在对抗时，给出折衷方案。
（3）给出优化的具体措施，例如优化数据库环境参数，对表格进行反规范化处理等。



7. 数据库管理与维护说明
提示：在设计数据库的时候，及时给出管理与维护本数据库的方法，有助于将来撰写出正确完备的用户手册。


三、附录
























注意:代码下附上图示

一、创建数据库
/*创建用户*/
CREATE USER Tiger IDENTIFIED BY 666;
GRANT CONNECT,RESOURCE TO Tiger

二、创建表
/*创建tb_user表*/

CREATE TABLE B_USER 
(
  USERID NUMBER NOT NULL 
, NAME VARCHAR2(20 BYTE) NOT NULL 
, COLUMN3 VARCHAR2(30 BYTE) NOT NULL 
, COLUMN4 VARCHAR2(30 BYTE) 
, COLUMNSID NUMBER 
, COLUMN6 NUMBER 
, COLUMN7 CHAR(11 BYTE) 
, COLUMN8 CHAR(3 BYTE) DEFAULT '男' 
, COLUMN9 NUMBER 
, COLUMN10 DATE 
, COLUMN11 NUMBER DEFAULT 0 
, COLUMN12 VARCHAR2(500 BYTE) 
, COLUMN13 VARCHAR2(200 BYTE) 
, COLUMN14 VARCHAR2(15 BYTE) 
, COLUMN15 VARCHAR2(50 BYTE) 
, COLUMN16 VARCHAR2(200 BYTE) 
, LOVEMUSIC VARCHAR2(200 BYTE) 
, COLUMN18 VARCHAR2(200 BYTE) 
, COLUMN19 VARCHAR2(200 BYTE) 
, COLUMN5 VARCHAR2(200 BYTE) 
, CONSTRAINT TB_USER_PK PRIMARY KEY 
  (
    USERID 
  )
  USING INDEX 
  (
      CREATE UNIQUE INDEX TB_USER_PK ON TB_USER (USERID ASC) 
      LOGGING 
      TABLESPACE USERS 
      PCTFREE 10 
      INITRANS 2 
      STORAGE 
      ( 
        BUFFER_POOL DEFAULT 
      ) 
      NOPARALLEL 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  BUFFER_POOL DEFAULT 
) 
NOCOMPRESS 
NOPARALLEL;

--创建sequence
create sequence identify_tb_user
increment by 1
start with 1
nomaxvalue
nocycle
nocache;
--创建自增触发器
CREATE OR REPLACE TRIGGER selfplus_tb_user
BEFORE INSERT ON TB_USER FOR EACH ROW
begin
select identify_tb_user.nextval into:new.USERID from dual;
end;




/*创建tb_product表*/
CREATE TABLE TB_PRODUCT 
(
  PRODUCTID NUMBER NOT NULL 
, USERID NUMBER NOT NULL 
, PRODUCTNAME VARCHAR2(50) NOT NULL 
, TYPEID NUMBER NOT NULL 
, PRICE NUMBER NOT NULL 
, PHOTO VARCHAR2(500) 
, INFORMATION VARCHAR2(500) 
, CONSTRAINT TB_PRODUCT_PK PRIMARY KEY 
  (
    PRODUCTID 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  BUFFER_POOL DEFAULT 
) 
NOCOMPRESS 
NOPARALLEL;

--创建sequence
create sequence identify_tb_product
increment by 1
start with 1
nomaxvalue
nocycle
nocache;
--创建自增触发器
CREATE OR REPLACE TRIGGER selfplus_tb_product
BEFORE INSERT ON tb_product FOR EACH ROW
begin
select identify_tb_product.nextval into:new.productID from dual;
end;




/*创建tb_productType表*/
CREATE TABLE TB_PRODUCTTYPE 
(
  PRODUCTTYPEID NUMBER NOT NULL 
, COLUMN1 VARCHAR2(100) NOT NULL 
, CONSTRAINT TB_PRODUCTTYPE_PK PRIMARY KEY 
  (
    PRODUCTTYPEID 
  )
  ENABLE 
);

--创建sequence
create sequence identify_tb_productType
increment by 1
start with 1
nomaxvalue
nocycle
nocache;
--创建自增触发器
CREATE OR REPLACE TRIGGER selfplus_tb_productType
BEFORE INSERT ON tb_productType FOR EACH ROW
begin
select identify_tb_productType.nextval into:new.productTypeID from dual;
end;


/*创建tb_order表*/
 (orderState,orderID) 
CREATE TABLE TB_ORDER 
(
  ORDERID NUMBER NOT NULL 
, TOID NUMBER NOT NULL 
, COLORID NUMBER NOT NULL 
, PRODUCTID NUMBER NOT NULL 
, COLUMN1 VARCHAR2(100) NOT NULL 
, TELEPHONE CHAR(11) NOT NULL 
, ORDERSTATE NUMBER NOT NULL 
, COUNT NUMBER NOT NULL 
, PRICE NUMBER NOT NULL 
, ORDERDATE DATE NOT NULL 
, CONSIGNMENTDATE DATE NOT NULL 
, CONSTRAINT TB_ORDER_PK PRIMARY KEY 
  (
    ORDERID 
  )
  ENABLE 
) 
LOGGING 
TABLESPACE USERS 
PCTFREE 10 
INITRANS 1 
STORAGE 
( 
  BUFFER_POOL DEFAULT 
) 
NOCOMPRESS 
NOPARALLEL;

--创建sequence
create sequence identify_tb_order
increment by 1
start with 1
nomaxvalue
nocycle
nocache;
--创建自增触发器
CREATE OR REPLACE TRIGGER selfplus_tb_order
BEFORE INSERT ON tb_order FOR EACH ROW
begin
select identify_tb_order.nextval into:new.orderID from dual;
end;



/*创建tb_userAccount表*/
CREATE TABLE TB_USERACCOUNT 
(
  USERACCOUNTID NUMBER NOT NULL 
, USERID NUMBER NOT NULL 
, ORDERID NUMBER NOT NULL 
, TYPE NUMBER NOT NULL 
, TIME DATE NOT NULL 
, CONSTRAINT TB_USERACCOUNT_PK PRIMARY KEY 
  (
    USERACCOUNTID 
  )
  ENABLE 
);



/*创建tb_review表*/
CREATE TABLE tb_review(
    reviewID number NOT NULL,
    review varchar2(250) NOT NULL,
    isReply CHAR(1) CONSTRAINT C_BOOLEAN1 CHECK (ISREPLY='Y' OR ISREPLY='N') NOT NULL,
    isDel CHAR(1) CONSTRAINT C_BOOLEAN2 CHECK (isDel='Y' OR isDel='N') NOT NULL,
    senderID number NOT NULL,
    productID number NOT NULL,
    addTime date NOT NULL,
    replyID number
);
--创建sequence
create sequence identify_tb_review
increment by 1
start with 1
nomaxvalue
nocycle
nocache;
--创建自增触发器
CREATE OR REPLACE TRIGGER selfplus_tb_review
BEFORE INSERT ON tb_review FOR EACH ROW
begin
select identify_tb_review.nextval into:new.reviewID from dual;
end;



/*创建tb_province表*/
CREATE TABLE tb_province(
    provinceID number NOT NULL,
    provinceName varchar2(30) NOT NULL
)
--创建sequence
create sequence identify_tb_province
increment by 1
start with 1
nomaxvalue
nocycle
nocache;
--创建自增触发器
CREATE OR REPLACE TRIGGER selfplus_tb_province
BEFORE INSERT ON tb_province FOR EACH ROW
begin
select identify_tb_province.nextval into:new.provinceID from dual;
end;



/*创建tb_city表*/
CREATE TABLE tb_city(
    cityID number NOT NULL,
    provinceID number NOT NULL,
    cityName varchar2(30) NOT NULL
)
--创建sequence
create sequence identify_tb_city
increment by 1
start with 1
nomaxvalue
nocycle
nocache;
--创建自增触发器
CREATE OR REPLACE TRIGGER selfplus_tb_city
BEFORE INSERT ON tb_city FOR EACH ROW
begin
select identify_tb_city.nextval into:new.cityID from dual;
end;



/*创建tb_productSize表*/
CREATE TABLE tb_productSize(
    productSizeID number NOT NULL,
    productSize varchar2(20) NOT NULL,
    productID number NOT NULL
)
--创建sequence
create sequence identify_tb_productSize
increment by 1
start with 1
nomaxvalue
nocycle
nocache;
--创建自增触发器
CREATE OR REPLACE TRIGGER selfplus_tb_productSize
BEFORE INSERT ON tb_productSize FOR EACH ROW
begin
select identify_tb_productSize.nextval into:new.productSizeID from dual;
end;



/*创建tb_productColor表*/
CREATE TABLE tb_productColor(
    productColorID number NOT NULL,
    productColor varchar2(20) NOT NULL,
    stockpile number NOT NULL,
    productSizeID number
)
--创建sequence
create sequence identify_tb_productColor
increment by 1
start with 1
nomaxvalue
nocycle
nocache;
--创建自增触发器
CREATE OR REPLACE TRIGGER selfplus_tb_productColor
BEFORE INSERT ON tb_productColor FOR EACH ROW
begin
select identify_tb_productColor.nextval into:new.productColorID from dual;
end;




三、添加约束
/*给每个表添加约束*/
--主键约束
alter table tb_user add constraint PK_userID primary key(userID);
alter table tb_product add constraint PK_productID primary key(productID);
alter table tb_productType add constraint PK_productTypeID primary key(productTypeID);
alter table tb_order add constraint PK_orderID primary key(orderID);
alter table tb_userAccount add constraint PK_userAccountID primary key(userAccountID);
alter table tb_review add constraint PK_reviewID primary key(reviewID);
alter table tb_province add constraint PK_provinceID primary key(provinceID);
alter table tb_city add constraint PK_cityID primary key(cityID);
alter table tb_productSize add constraint PK_productSizeID primary key(productSizeID);
alter table tb_productColor add constraint PK_productColorID primary key(productColorID);

--唯一约束
alter table tb_user add constraint UNI_userName unique(name);

--外键约束
alter table tb_user add constraint FK_user_cityID foreign key(cityID) references tb_city(cityID);

alter table tb_product add constraint FK_product_userID foreign key(userID) references tb_user(userID);
alter table tb_product add constraint FK_product_typeID foreign key(typeID) references tb_productType(productTypeID);

alter table tb_order add constraint FK_order_toID foreign key(toID) references tb_user(userID);
alter table tb_order add constraint FK_order_colorID foreign key(colorID) references tb_productColor(productColorID);
alter table tb_order add constraint FK_order_productID foreign key(productID) references tb_product(productID);

alter table tb_userAccount add constraint FK_userAccount_userID foreign key(userID) references tb_user(userID);
alter table tb_userAccount add constraint KF_userAccount_orderID foreign key(orderID) references tb_order(orderID);

alter table tb_review add constraint FK_review_senderID foreign key(senderID) references tb_user(userID);
alter table tb_review add constraint FK_review_productID foreign key(productID) references tb_product(productID);

alter table tb_city add constraint FK_city_provinceID foreign key(provinceID) references tb_province(provinceID);

alter table tb_productSize add constraint FK_productSize_productID foreign key(productID) references tb_product(productID);

alter table tb_productColor add constraint FK_productColor_productSizeID foreign key(productSizeID) references tb_productSize(productSizeID);

四、基础数据(商品类型+省份+城市)添加
/*基础数据(商品类型+省份+城市)添加*/
/*tb_productType表添加商品类型*/
insert into tb_productType values (seq_productType.nextval,'书籍');
insert into tb_productType values (seq_productType.nextval,'手机');
insert into tb_productType values (seq_productType.nextval,'平板');
insert into tb_productType values (seq_productType.nextval,'笔记本电脑');
/*tb_province表添加省份名称*/
insert into tb_province values (seq_province.nextval,'北京');
insert into tb_province values (seq_province.nextval,'广东');
insert into tb_province values (seq_province.nextval,'山东');
/*tb_city表给山东省添加城市名称*/
insert into tb_city values (seq_city.nextval,1,'北京');
insert into tb_city values (seq_city.nextval,2,'珠海');
insert into tb_city values (seq_city.nextval,3,'济南');
insert into tb_city values (seq_city.nextval,3,'青岛');
insert into tb_city values (seq_city.nextval,3,'烟台');
insert into tb_city values (seq_city.nextval,3,'威海');
五、用户数据(注册+信息完善)添加
/*用户数据(注册+信息完善)添加*/
/*tb_user表添加用户信息*/
insert into tb_user (userID,name,password) values (seq_user.nextval,'雷军','123456');
insert into tb_user (userID,name,password) values (seq_user.nextval,'黄章','111111');
update tb_user set email='leijun@xiaomi.com',provinceid=1,cityid=1,age=47,birthday=to_date('1969-12-16','yyyy-mm-dd') where  userid=1001;
update tb_user set email='huangzhang@meizu.com',provinceid=2,cityid=2,age=40,birthday=to_date('1976-2-13','yyyy-mm-dd') where  userid=1002;

六、商品信息(商品信息+型号+颜色)添加
/*商品信息(商品信息+型号+颜色)添加*/
/*tb_product表添加商品信息*/
insert into tb_product(productID,userID,productName,typeID,price) values (seq_product.nextval,1001,'索尼WALKMAN',1,1000);
insert into tb_product(productID,userID,productName,typeID,price) values (seq_product.nextval,1001,'小米5',2,2299);
insert into tb_product(productID,userID,productName,typeID,price) values (seq_product.nextval,1001,'小米4s',2,1799);
insert into tb_product(productID,userID,productName,typeID,price) values (seq_product.nextval,1002,'魅族PRO6',2,2499);
insert into tb_product(productID,userID,productName,typeID,price) values (seq_product.nextval,1002,'魅族MX5',2,1799);
/*tb_productSize表添加商品型号*/
insert into tb_productSize values (seq_productSize.nextval,'标准版',2);
insert into tb_productSize values (seq_productSize.nextval,'高配版',2);
insert into tb_productSize values (seq_productSize.nextval,'至尊版',2);
insert into tb_productSize values (seq_productSize.nextval,'标准版16GB',1);
insert into tb_productSize values (seq_productSize.nextval,'标准版64GB',1);
insert into tb_productSize values (seq_productSize.nextval,'标准版128GB',1);
/*tb_productColor表添加商品型号*/
insert into tb_productSize values (seq_productSize.nextval,'标准版',2);
insert into tb_productSize values (seq_productSize.nextval,'高配版',2);
insert into tb_productSize values (seq_productSize.nextval,'至尊版',2);
insert into tb_productSize values (seq_productSize.nextval,'标准版16GB',1);
insert into tb_productSize values (seq_productSize.nextval,'标准版64GB',1);
insert into tb_productSize values (seq_productSize.nextval,'标准版128GB',1);

七、删除用户信息
/*删除用户****/
delete from tb_user where userid=1001;

八、商品信息查询
/*商品信息查询*/
select * from tb_product;

/*单表查询*/
/*查询tb_product表中商品id为的商品信息*/
select * from tb_product where productid=1;

/*查询tb_productSize表中商品id为的型号信息*/
select * from tb_productsize where productid=1;

/*查询tb_productColor表中商品型号id为、、的颜色与库存信息*/
select * from tb_productcolor where productsizeid=1;

/*多表查询*/
/*用户在商城以商品类型查询一件商品的名称*/
select productname from tb_producttype join tb_product on tb_producttype.producttypeid=tb_product.typeid where producttypename='手机';

/*用户在商城以商品名称查询一件商品的所有信息*/
select * from tb_producttype join tb_product on tb_producttype.producttypeid=tb_product.typeid where productname='小米5';

九、用户信息查询
/*用户信息查询*/
/*用户在商城可以查询已知用户(或卖家)的基本信息*/
select userid,name,email,provincename,cityname,telephone,sex,age,birthday,photo,dsp,qq,msn,lovebook,lovemusic,lovemovie,lovesport,lovegame from tb_user join tb_province on tb_user.provinceid=tb_province.provinceid join tb_city on tb_province.provinceid=tb_city.provinceid;


十、用户下订单并确认付款（应用）
/*用户下订单并确认付款(应用事务)*/
/*用户***想要购买卖家***的产品颜色-大小-产品名*/

0-未付款 1-已付款 2-发货  4-撤回 5-完成
/*定义变量,用于存储本次订单的物品单价*/
declare
  p number;
begin
  select tb_product.price into p from tb_order join tb_product on tb_order.productid=tb_product.productid  where orderid = 1;
end;


/*定义变量,用于存储本次订单的物品ID*/
declare
  gId number;
begin
  select productId into gId from tb_order where orderid = 1;
end;

/*定义变量,用于存储本次订单的颜色ID*/
declare
  cId number;
begin
  select colorId into cId from tb_order where orderid = 1;
end;

/*定义变量,用于存储本次订单的买家ID*/
declare
  tId number;
begin
  select toId into tId from tb_order where orderid = 1;
end;


/*定义变量,用于存储流水表的用户ID*/
declare uid number;
begin
  select userId into uid from tb_useraccount where orderid = 1;
  dbms_output.put_line(uid);
end;
/*用户****下订单*/
/*用户****将订单信息填入到tb_order表中*/
		--orderState订单状态为用户选择填入下订单(买家付款后自动转为已付款,买家付款后卖家可选择修改为延后,卖家发货后选择修改为发货,买家未付款时卖家可选择修改为撤销,买家收到货物后可选择修改为完成)
declare 
  toID number;
  colorID number;
  pID number;
  address varchar2(100);
  p varchar2(50);
  c varchar2(50);
  tel char(11);
  ostate number;
  cou number;
  price number;
begin
  toID:=1001;
  cou:=1;
  select productid into pID from tb_product where productname='小米4s';
  select productcolorid into colorid from tb_productcolor where productsizeid=pID and productcolor='黑色';
  select provincename into p from tb_province join tb_user on tb_user.provinceid=tb_province.provinceid where userid=toID;
  select cityname into c from (tb_city join tb_user on tb_user.cityid=tb_city.cityid) join tb_province on tb_province.provinceid=tb_city.provinceid where userid=toID;
  select price into price from tb_product where productid = pID;
  select telephone into tel from tb_user where userid=toid;
  price:=price * cou;
  if (p=c) then
    address:=p;
  else
    address:=p||c;
  end if;
  ostate:=0;
  dbms_output.put_line(tel);
  insert into tb_order values (3,toID,colorID,pID,address,tel,ostate,cou,price,sysdate(),sysdate());
end;

/*下订单后减少商品库存*/
declare 
  cou number;
  stock number;
  colorID number;
begin
  cou:=1;
  colorID:=2;
  select stockpile into stock from tb_productcolor where productcolorid=colorID;
  stock:=stock-cou;
  dbms_output.put_line(stock);
  update tb_productcolor set stockpile = stock where productcolorid=colorID;
end;

/*确认付款后减少用户余额*/
declare
  pID number;
  toID number;
  pri number;
  mon number;
begin
  pID:=3;
  toID:=1001;
  select price into pri from tb_product where productid=pID;
  select money into mon from tb_user where userid=toid;
  mon:=mon-pri;
  dbms_output.put_line(mon);
end;

/*将用户付款的资金冻结后订单状态改为已付款*/
update tb_order set orderstate=1 where orderid=3;

十一、买家对订单信息进行修改（包括发货后的订单状态修改及修改商品颜色时应用事务）
/*卖家对订单信息进行修改*/
/*假设买家***想修改商品的颜色，则需要应用事务，对相应颜色的库存进行修改*/
/*修改信息是各项信息均为可选择项，如不想修改某项信息，则选择以前的选项，但是会将数据重复的修改一次，即用相同的数据来覆盖之前的数据*/
/*除此之外卖家发货后可将订单状态改为发货*/
/*定义变量,用于存储本次订单的物品单价*/
declare
  p number;
begin
  select tb_product.price into p from tb_product join tb_order on tb_product.productid=tb_order.productid where orderid=3;
  dbms_output.put_line(p);
end;

/*修改tb_order表中的送货地址*/
update tb_order set address='XXXXXX' where orderid=3;

/*修改tb_order表中的联系方式*/
update tb_order set telephone='10010' where orderid=3;

/*修改tb_order表中的状态*/
	--若卖家因故不能发货，但已付款则卖家可修改订单状态为'延后'
update tb_order set orderstate=3 where orderid=3;

/*修改tb_order表中的商品颜色*/
update tb_order set colorid=3 where orderid=3;

/*修改tb_order表中的商品总价*/
	--若和买家商议后买家同意降价，但商品信息上还是不修改的，就可以在订单总价上修改，付款后卖家修改总价，差价打回买家账户余额内
update tb_order set price=1999 where orderid=3;
/*将与之前的差价加回买家账户余额内*/
declare
  tid number;
  cj number;
  pris number;
  pri number;
  mon number;
begin
  pris:=1999;
  select price into pri from tb_order where orderid=3;
  select toid into tid from tb_order where orderid=3;
  cj:=pri-pris;
  select money into mon from tb_user where userid=tid;
  mon:=mon+cj;
  update tb_user set money=mon where userid=tid;
end;


/*修改tb_user表中买家的账户余额*/
declare
  tid number;
  cj number;
  pris number;
  pri number;
  mon number;
begin
  pris:=1999;
  select price into pri from tb_order where orderid=3;
  select userid into tid from tb_user join tb_order on tb_order.toid=tb_user.userid where orderid=3;
  cj:=pri-pris;
  select money into mon from tb_user where userid=tid;
  mon:=mon+cj;
  update tb_user set money=mon where userid=tid;
end;
/*修改颜色后要将之前选择的颜色库存加一再讲修改后的颜色库存减一*/
declare
  ocid number;
  ncid number;
  s1 number;
  s2 number;
begin
  ncid:=3;
  select colorid into ocid from tb_order where orderid=3;
  select stockpile into s1 from tb_productcolor where productcolorid=ocid;
  select stockpile into s2 from tb_productcolor where productcolorid=ncid;
  s1:=s1+1;
  s2:=s2-1;
  update tb_productcolor set stockpile=s1 where productcolorid=ocid;
  update tb_productcolor set stockpile=s2 where productcolorid=ncid; 
end;

十二、订单完成进行转账
/*订单完成进行转账*/
/*定义变量,用于存储流水表的用户ID*/
declare uid number;
begin
  select userId into uid from tb_useraccount where orderid = 1;
end;

/*定义变量,用于存储本次订单的物品单价*/
declare
  p number;
begin
  select price into p from tb_order where orderid = 1;
end;

/*买家收到商品后，修改tb_order表中的状态*/
update tb_order set orderstate=3 where orderid=4;


/*订单状态为'完成'后建立用户资金流水表一条卖家出售商品收入记录*/
假设orderstate=5为完成。
CREATE OR REPLACE TRIGGER tb_trigger
after update of orderstate
ON tb_order
referencing old as old_value 
     new as new_value 
FOR EACH ROW
when (new_value.orderstate=5)
DECLARE
  tid number;
  orid number;
  typ number;
BEGIN
  tid:=1001;
  orid:=3;
  typ:=1;
  insert into tb_useraccount values (seq_useraccount.nextval,tid,orid,typ,to_date('2016-07-03','yyyy-mm-dd'));
END;

/*交易成功后卖家账户余额增加*/
假设orderstate=5为完成。
declare 
  tid number;
  orid number;
  pri number;
  mon number;
begin
  orid:=3;
  select price into pri from tb_order where orderid=orid;
  select userid into tid from tb_user join tb_order on tb_user.userid=tb_order.toid where orderid=orid;
  select money into mon from tb_user join tb_order on tb_user.userid=tb_order.toid where orderid=orid;
  mon:= pri + mon;
  update tb_user set money=mon where userid=tid;
end;

十三、货物丢件进行退款
/*货物丢件进行退款*/
/*前提条件:订单为发货状态，但物流出现丢件情况，由物流赔偿卖家，卖家确认丢件情况发生后，可进行退款操作*/
/*定义变量,用于存储流水表的用户ID*/
declare uid number;
begin
  select userId into uid from tb_useraccount where orderid = 1;
  dbms_output.put_line(uid);
end;


/*卖家确认商品丢件后，修改tb_order表中的状态*/
update tb_order set orderstate=4 where orderid=3;

/*订单状态为'撤销'后建立用户资金流水表一条买家商品退款收入记录*/
CREATE OR REPLACE TRIGGER tb_trigger3
after update of orderstate
ON tb_order
referencing old as old_value 
     new as new_value 
FOR EACH ROW
when (new_value.orderstate=4)
DECLARE
  tid number;
  orid number;
  typ number;
BEGIN
  tid:=1001;
  orid:=3;
  typ:=1;
  insert into tb_useraccount values (8,tid,orid,typ,to_date('2016-07-04','yyyy-mm-dd'));
END;


/*撤销成功后买家账户余额恢复*/
declare
  tid number;
  pri number;
  mon number;
begin
  select price into pri from tb_order where orderid=3;
  select money into mon from tb_user join tb_order on tb_order.toid=tb_user.userid where orderid=3;
  select userid into tid from tb_user join tb_order on tb_order.toid=tb_user.userid where orderid=3;
  mon:=mon+pri;
  dbms_output.put_line(tid);
  update tb_user set money=mon where userid=tid;
end;

十四、视图
--/*多表查询*/
--/*用户在商城以商品类型查询一件商品的名称*/
create or replace view view1
AS
select productName 
from tb_product join tb_producttype on tb_product.typeid=tb_producttype.producttypeid
where productTypeName='MP3';

--/*用户在商城以商品名称查询一件商品的所有信息*/
create or replace view view2
AS
select tb_product.productid,tb_product.information,tb_product.photo,tb_product.price,tb_product.productname,tb_product.typeid,tb_product.userid,tb_productcolor.productcolor,tb_productcolor.productcolorid
,tb_productcolor.productsizeid,tb_productcolor.stockpile,tb_productsize.productsize,tb_producttype.producttypeid,tb_producttype.producttypename
from tb_producttype join tb_product on tb_producttype.productTypeID=tb_product.typeid
join tb_productsize on tb_productsize.productid=tb_product.productid
join tb_productcolor on tb_productcolor.productsizeid=tb_productsize.productsizeid
where tb_product.productName='小米5';

--/*用户信息查询*/
--/*用户在商城可以查询已知用户(或卖家)的基本信息*/
create or replace view view3
AS
select tb_user.name,tb_user.age,tb_user.birthday,tb_user.dsp,tb_user.email,tb_user.lovebook,tb_user.lovegame,tb_user.lovemovie,tb_user.lovemusic,tb_user.lovesport,tb_user.msn
,tb_user.qq,tb_user.sex,tb_user.telephone,tb_city.cityname,tb_province.provincename
from tb_user join tb_city on tb_user.cityid=tb_city.cityid
join tb_province on tb_province.provinceid=tb_city.provinceid; 
十五、用户登录(选做) 例如:sql server 格式:
/*用户登录(应用存储过程)*/ 
create procedure proc_land
@resultName int = 0,	--定义为表示用户名错误
@resultPassWord int =0,	--定义为表示密码错误
@userName nvarchar(10) = '***',  
@PassWord nvarchar(30) = 'jhc123'   
as
select @resultName = COUNT(1) from tb_user where name=@userName									--只要表中有输入的用户名则为表示用户名存在
select @resultPassWord = COUNT(1) from tb_user where name=@userName and [password]=@PassWord	--若存在的这个用户的信息里的密码等与输入的密码则为表示密码核对无误
begin
if @resultName = 1 and @resultPassWord = 1
	print '用户登录成功！'
else if @resultName = 0
	print '用户名错误！'
else if @resultPassWord = 0
	print '密码错误！'
end

create or replace procedure signin
(un varchar2,up varchar2)
as
  n number;
begin
  select count(*) into n from tb_user where name=un and  password=up;
  if n=0 then
    dbms_output.put_line('登录失败');
  else
    dbms_output.put_line('登录成功');
  end if;
end;  



